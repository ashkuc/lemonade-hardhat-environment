{
  "address": "0xa0f12a0943833226cA556dccB5B1309c3BCd654c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeAccount",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "feeValue",
          "type": "uint96"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "OrderBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum LemonadeMarketplace.OrderKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openFrom",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openTo",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paidAmount",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_ACCOUNT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_VALUE",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "bidOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LemonadeMarketplace.OrderKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "openFrom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openTo",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fillOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "order",
      "outputs": [
        {
          "internalType": "enum LemonadeMarketplace.OrderKind",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder_",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f5d6720a616168bf0adf3056186f4853a508955d4b86c105a8da04e19fb85cf",
  "receipt": {
    "to": null,
    "from": "0x951292004e8a18955Cb1095CB72Ca6B01d68336E",
    "contractAddress": "0xa0f12a0943833226cA556dccB5B1309c3BCd654c",
    "transactionIndex": 11,
    "gasUsed": "5483575",
    "logsBloom": "0x
    "blockHash": "0xab00bf9782e4361a9f1e6c229b534e37688a2f7792efc794dfc1a9873f3a3a54",
    "transactionHash": "0x4f5d6720a616168bf0adf3056186f4853a508955d4b86c105a8da04e19fb85cf",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 23594250,
        "transactionHash": "0x4f5d6720a616168bf0adf3056186f4853a508955d4b86c105a8da04e19fb85cf",
        "address": "0xa0f12a0943833226cA556dccB5B1309c3BCd654c",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0xab00bf9782e4361a9f1e6c229b534e37688a2f7792efc794dfc1a9873f3a3a54"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 23594250,
        "transactionHash": "0x4f5d6720a616168bf0adf3056186f4853a508955d4b86c105a8da04e19fb85cf",
        "address": "0xa0f12a0943833226cA556dccB5B1309c3BCd654c",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0xab00bf9782e4361a9f1e6c229b534e37688a2f7792efc794dfc1a9873f3a3a54"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 23594250,
        "transactionHash": "0x4f5d6720a616168bf0adf3056186f4853a508955d4b86c105a8da04e19fb85cf",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000026f6909501be110000000000000000000000000000000000000000000000000e4c3afb36895c28000000000000000000000000000000000000000000000363675863f06d7b30fa0000000000000000000000000000000000000000000000000e25446aa1879e17000000000000000000000000000000000000000000000363677f5a81027cef0b",
        "logIndex": 43,
        "blockHash": "0xab00bf9782e4361a9f1e6c229b534e37688a2f7792efc794dfc1a9873f3a3a54"
      }
    ],
    "blockNumber": 23594250,
    "cumulativeGasUsed": "6831168",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x951292004e8a18955Cb1095CB72Ca6B01d68336E",
    "200",
    "0x9399BB24DBB5C4b782C70c2969F58716Ebbd6a3b"
  ],
  "solcInputHash": "e36dd94290dc41b9804dfb8a6e5aabca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAccount\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeValue\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"OrderBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum LemonadeMarketplace.OrderKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openTo\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_ACCOUNT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_VALUE\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bidOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LemonadeMarketplace.OrderKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"openFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openTo\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"order\",\"outputs\":[{\"internalType\":\"enum LemonadeMarketplace.OrderKind\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder_\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LemonadeMarketplace.sol\":\"LemonadeMarketplace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IERC2981 is IERC165 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(\\n        uint256 _tokenId,\\n        uint256 _salePrice\\n    ) external view returns (\\n        address receiver,\\n        uint256 royaltyAmount\\n    );\\n}\\n\",\"keccak256\":\"0x4abe7ea4eabf65b0e7bb547a64b57d9df104c8ac5b9c98f2932ed9f925732eea\",\"license\":\"MIT\"},\"contracts/LemonadeMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC2981.sol\\\";\\nimport \\\"./rarible/RoyaltiesV2.sol\\\";\\nimport \\\"./RelayRecipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract LemonadeMarketplace is\\n    AccessControlEnumerable,\\n    Pausable,\\n    RelayRecipient\\n{\\n    using Counters for Counters.Counter;\\n\\n    address public immutable FEE_ACCOUNT;\\n    uint96 public immutable FEE_VALUE;\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    enum OrderKind {\\n        Direct,\\n        Auction\\n    }\\n\\n    event OrderCreated(\\n        uint256 indexed orderId,\\n        OrderKind kind,\\n        uint256 openFrom,\\n        uint256 openTo,\\n        address indexed maker,\\n        address currency,\\n        uint256 price,\\n        address tokenContract,\\n        uint256 tokenId\\n    );\\n    event OrderBid(\\n        uint256 indexed orderId,\\n        address indexed bidder,\\n        uint256 bidAmount\\n    );\\n    event OrderFilled(\\n        uint256 indexed orderId,\\n        address indexed taker,\\n        uint256 paidAmount\\n    );\\n    event OrderCancelled(uint256 indexed orderId);\\n\\n    struct Order {\\n        OrderKind kind;\\n        bool open;\\n        uint256 openFrom;\\n        uint256 openTo;\\n        address maker;\\n        address currency;\\n        uint256 price;\\n        address tokenContract;\\n        uint256 tokenId;\\n        address bidder;\\n        uint256 bidAmount;\\n        address taker;\\n        uint256 paidAmount;\\n    }\\n    mapping(uint256 => Order) private _orders;\\n\\n    Counters.Counter private _orderIdTracker;\\n\\n    constructor(\\n        address feeAccount,\\n        uint96 feeValue,\\n        address trustedForwarder_\\n    ) {\\n        FEE_ACCOUNT = feeAccount;\\n        FEE_VALUE = feeValue;\\n\\n        trustedForwarder = trustedForwarder_;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function fee() external view returns (address, uint96) {\\n        return (FEE_ACCOUNT, FEE_VALUE);\\n    }\\n\\n    function order(uint256 orderId)\\n        external\\n        view\\n        virtual\\n        whenExists(orderId)\\n        returns (\\n            OrderKind,\\n            bool,\\n            uint256,\\n            uint256,\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256\\n        )\\n    {\\n        Order memory order_ = _orders[orderId];\\n        return (\\n            order_.kind,\\n            order_.open,\\n            order_.openFrom,\\n            order_.openTo,\\n            order_.maker,\\n            order_.currency,\\n            order_.price,\\n            order_.bidAmount,\\n            order_.taker,\\n            order_.paidAmount\\n        );\\n    }\\n\\n    function token(uint256 orderId)\\n        external\\n        view\\n        virtual\\n        whenExists(orderId)\\n        returns (address, uint256)\\n    {\\n        return (_orders[orderId].tokenContract, _orders[orderId].tokenId);\\n    }\\n\\n    function createOrder(\\n        OrderKind kind,\\n        uint256 openFrom,\\n        uint256 openTo,\\n        address currency,\\n        uint256 price,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external virtual whenNotPaused returns (uint256) {\\n        uint256 openDuration_ = openDuration(openFrom, openTo);\\n\\n        require(\\n            openDuration_ > 0,\\n            \\\"LemonadeMarketplace: order must be open at some point\\\"\\n        );\\n\\n        if (kind == OrderKind.Auction) {\\n            require(\\n                openDuration_ <= 30 * 24 * 60 * 60,\\n                \\\"LemonadeMarketplace: order of kind auction must not be open for more than 30 days\\\"\\n            );\\n        }\\n\\n        IERC721(tokenContract).transferFrom(\\n            _msgSender(),\\n            address(this),\\n            tokenId\\n        );\\n\\n        uint256 orderId = _orderIdTracker.current();\\n\\n        _orders[orderId] = Order({\\n            kind: kind,\\n            open: true,\\n            openFrom: openFrom,\\n            openTo: openTo,\\n            maker: _msgSender(),\\n            currency: currency,\\n            price: price,\\n            tokenContract: tokenContract,\\n            tokenId: tokenId,\\n            bidder: address(0),\\n            bidAmount: 0,\\n            taker: address(0),\\n            paidAmount: 0\\n        });\\n\\n        _orderIdTracker.increment();\\n\\n        Order memory order_ = _orders[orderId];\\n        emit OrderCreated(\\n            orderId,\\n            order_.kind,\\n            order_.openFrom,\\n            order_.openTo,\\n            order_.maker,\\n            order_.currency,\\n            order_.price,\\n            order_.tokenContract,\\n            order_.tokenId\\n        );\\n        return orderId;\\n    }\\n\\n    function cancelOrder(uint256 orderId)\\n        external\\n        virtual\\n        whenNotPaused\\n        whenExists(orderId)\\n    {\\n        Order memory order_ = _orders[orderId];\\n        require(\\n            order_.maker == _msgSender() ||\\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n            \\\"LemonadeMarketplace: must be the maker to cancel\\\"\\n        );\\n        require(\\n            order_.open,\\n            \\\"LemonadeMarketplace: order must be open to cancel\\\"\\n        );\\n        require(\\n            order_.bidder == address(0),\\n            \\\"LemonadeMarketplace: order must have no bid to cancel\\\"\\n        );\\n\\n        IERC721(order_.tokenContract).safeTransferFrom(\\n            address(this),\\n            order_.maker,\\n            order_.tokenId\\n        );\\n\\n        _orders[orderId].open = false;\\n        emit OrderCancelled(orderId);\\n    }\\n\\n    function bidOrder(uint256 orderId, uint256 amount)\\n        external\\n        virtual\\n        whenNotPaused\\n        whenExists(orderId)\\n    {\\n        Order memory order_ = _orders[orderId];\\n        require(\\n            order_.kind == OrderKind.Auction,\\n            \\\"LemonadeMarketplace: order must be of kind auction to bid\\\"\\n        );\\n        require(order_.open, \\\"LemonadeMarketplace: order must be open to bid\\\");\\n        require(\\n            order_.openFrom <= block.timestamp,\\n            \\\"LemonadeMarketplace: order must be open to bid - too early\\\"\\n        );\\n        require(\\n            order_.openTo > block.timestamp,\\n            \\\"LemonadeMarketplace: order must be open to bid - too late\\\"\\n        );\\n        require(\\n            order_.price <= amount,\\n            \\\"LemonadeMarketplace: must match price to bid\\\"\\n        );\\n\\n        if (order_.bidder != address(0)) {\\n            require(\\n                order_.bidAmount < amount,\\n                \\\"LemonadeMarketplace: must surpass bid to bid\\\"\\n            );\\n\\n            transferERC20(\\n                order_.currency,\\n                address(this),\\n                order_.bidder,\\n                order_.bidAmount\\n            );\\n        }\\n\\n        _orders[orderId].bidder = _msgSender();\\n        _orders[orderId].bidAmount = amount;\\n        order_ = _orders[orderId];\\n\\n        transferERC20(\\n            order_.currency,\\n            order_.bidder,\\n            address(this),\\n            order_.bidAmount\\n        );\\n\\n        emit OrderBid(orderId, order_.bidder, order_.bidAmount);\\n    }\\n\\n    function fillOrder(uint256 orderId, uint256 amount)\\n        external\\n        virtual\\n        whenNotPaused\\n        whenExists(orderId)\\n    {\\n        Order memory order_ = _orders[orderId];\\n        require(order_.open, \\\"LemonadeMarketplace: order must be open to fill\\\");\\n\\n        _orders[orderId].open = false;\\n        address spender;\\n\\n        if (order_.kind == OrderKind.Direct) {\\n            require(\\n                order_.openFrom <= block.timestamp,\\n                \\\"LemonadeMarketplace: order must be open to fill - too early\\\"\\n            );\\n            require(\\n                order_.openTo == 0 || order_.openTo > block.timestamp,\\n                \\\"LemonadeMarketplace: order must be open to fill - too late\\\"\\n            );\\n            require(\\n                order_.price <= amount,\\n                \\\"LemonadeMarketplace: must match price to fill direct order\\\"\\n            );\\n\\n            _orders[orderId].taker = _msgSender();\\n            _orders[orderId].paidAmount = amount;\\n            spender = _msgSender();\\n        } else if (order_.kind == OrderKind.Auction) {\\n            require(\\n                (order_.bidder != address(0)),\\n                \\\"LemonadeMarketplace: order must have bid to fill auction order\\\"\\n            );\\n            require(\\n                (order_.bidder == _msgSender() &&\\n                    order_.openTo <= block.timestamp) ||\\n                    order_.maker == _msgSender() ||\\n                    hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n                \\\"LemonadeMarketplace: must be the maker or final bidder to fill auction order\\\"\\n            );\\n\\n            _orders[orderId].taker = order_.bidder;\\n            _orders[orderId].paidAmount = order_.bidAmount;\\n            spender = address(this);\\n        }\\n\\n        order_ = _orders[orderId];\\n\\n        if (order_.paidAmount > 0) {\\n            uint256 transferAmount = order_.paidAmount;\\n\\n            uint256 feeAmount = (order_.paidAmount * FEE_VALUE) / 10000;\\n            transferERC20(order_.currency, spender, FEE_ACCOUNT, feeAmount);\\n            transferAmount -= feeAmount;\\n\\n            try\\n                RoyaltiesV2(order_.tokenContract).getRaribleV2Royalties(\\n                    order_.tokenId\\n                )\\n            returns (LibPart.Part[] memory royalties) {\\n                uint256 length = royalties.length;\\n                for (uint256 i; i < length; i++) {\\n                    if (order_.maker != royalties[i].account) {\\n                        uint256 royaltyAmount = (order_.paidAmount *\\n                            royalties[i].value) / 10000;\\n                        transferERC20(\\n                            order_.currency,\\n                            spender,\\n                            royalties[i].account,\\n                            royaltyAmount\\n                        );\\n                        transferAmount -= royaltyAmount;\\n                    }\\n                }\\n            } catch {\\n                try\\n                    IERC2981(order_.tokenContract).royaltyInfo(\\n                        order_.tokenId,\\n                        order_.paidAmount\\n                    )\\n                returns (address receiver, uint256 royaltyAmount) {\\n                    if (order_.maker != receiver) {\\n                        transferERC20(\\n                            order_.currency,\\n                            spender,\\n                            receiver,\\n                            royaltyAmount\\n                        );\\n                        transferAmount -= royaltyAmount;\\n                    }\\n                } catch {}\\n            }\\n\\n            if (transferAmount > 0) {\\n                transferERC20(\\n                    order_.currency,\\n                    spender,\\n                    order_.maker,\\n                    transferAmount\\n                );\\n            }\\n        }\\n\\n        IERC721(order_.tokenContract).safeTransferFrom(\\n            address(this),\\n            order_.taker,\\n            order_.tokenId\\n        );\\n\\n        emit OrderFilled(orderId, order_.taker, order_.paidAmount);\\n    }\\n\\n    function transferERC20(\\n        address currency_,\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        IERC20 currency = IERC20(currency_);\\n\\n        if (spender == address(this)) {\\n            currency.transfer(recipient, amount);\\n        } else {\\n            currency.transferFrom(spender, recipient, amount); // requires allowance\\n        }\\n    }\\n\\n    function openDuration(uint256 openFrom, uint256 openTo)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        uint256 start = openFrom < block.timestamp ? block.timestamp : openFrom;\\n        uint256 end = openTo == 0 ? type(uint256).max : openTo;\\n\\n        if (start > end) {\\n            // avoids overflow\\n            return 0;\\n        }\\n\\n        return end - start;\\n    }\\n\\n    modifier whenExists(uint256 orderId) {\\n        require(\\n            _orders[orderId].maker != address(0),\\n            \\\"LemonadeMarketplace: order nonexistent\\\"\\n        );\\n        _;\\n    }\\n\\n    function pause() external virtual {\\n        require(\\n            hasRole(PAUSER_ROLE, _msgSender()),\\n            \\\"LemonadeMarketplace: must have pauser role to pause\\\"\\n        );\\n        _pause();\\n    }\\n\\n    function unpause() external virtual {\\n        require(\\n            hasRole(PAUSER_ROLE, _msgSender()),\\n            \\\"LemonadeMarketplace: must have pauser role to unpause\\\"\\n        );\\n        _unpause();\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(Context, RelayRecipient)\\n        returns (address)\\n    {\\n        return RelayRecipient._msgSender();\\n    }\\n\\n    function setTrustedForwarder(address trustedForwarder_)\\n        external\\n        virtual\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        trustedForwarder = trustedForwarder_;\\n    }\\n}\\n\",\"keccak256\":\"0xdc5101097e4fc8a74536f4b40e7e1d5c70275dcd91aeecb8cc4402534a804430\",\"license\":\"MIT\"},\"contracts/RelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./forwarder/BaseRelayRecipient.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nabstract contract RelayRecipient is BaseRelayRecipient {\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(BaseRelayRecipient)\\n        returns (address)\\n    {\\n        return BaseRelayRecipient._msgSender();\\n    }\\n\\n    function versionRecipient() external pure override returns (string memory) {\\n        return \\\"1\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x12ac4a2ab84eed2a5b09b442e4b551bbcc70ce1bde18054d2ad4daf479d8b325\",\"license\":\"MIT\"},\"contracts/forwarder/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address public trustedForwarder;\\n\\n    /*\\n     * require a function to be called through GSN only\\n     */\\n    modifier trustedForwarderOnly() {\\n        require(msg.sender == address(trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n        _;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\\n        return forwarder == trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0faf9cda5fab6b2780555a1dbb66e29d317f3ef4921b7fd99c3eec0873b59093\",\"license\":\"MIT\"},\"contracts/forwarder/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier:MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8d761a1d0f6bb2fb1d7fc7e4be54690ecfdb32e9fded67dbeeda12b9df97d2cf\",\"license\":\"MIT\"},\"contracts/rarible/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xf9fd0d768bdc8ca426790737f8548484573148dd5ed0365c31d98a06ecc0ed5b\",\"license\":\"MIT\"},\"contracts/rarible/RoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\ninterface RoyaltiesV2 {\\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\\n\\n    function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0x209acdaf24082cd88ded8211468371a65de5f67713d2d888f1f048d757054d13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80637da0a877116100de578063b858fb5f11610097578063d547741f11610071578063d547741f146104a1578063da742228146104bd578063ddca3f43146104d9578063e63ab1e9146104f85761018e565b8063b858fb5f14610439578063c37dfc5b14610455578063ca15c873146104715761018e565b80637da0a877146103755780638456cb59146103935780639010d07c1461039d57806391d14854146103cd578063a217fddf146103fd578063ae9130951461041b5761018e565b806336568abe1161014b578063514fcac711610125578063514fcac7146102ed578063572b6c05146103095780635c975abb146103395780637cca687b146103575761018e565b806336568abe146102a95780633f4ba83a146102c5578063486ff0cd146102cf5761018e565b806301ffc9a714610193578063044215c6146101c35780630c109710146101f457806321603f4314610224578063248a9ca31461025d5780632f2ff15d1461028d575b600080fd5b6101ad60048036038101906101a891906146ff565b610516565b6040516101ba9190614d5b565b60405180910390f35b6101dd60048036038101906101d891906147c6565b610590565b6040516101eb929190614d09565b60405180910390f35b61020e60048036038101906102099190614728565b610692565b60405161021b91906151be565b60405180910390f35b61023e600480360381019061023991906147c6565b610ef2565b6040516102549a99989796959493929190614d91565b60405180910390f35b6102776004803603810190610272919061465e565b6112af565b6040516102849190614d76565b60405180910390f35b6102a760048036038101906102a29190614687565b6112ce565b005b6102c360048036038101906102be9190614687565b611302565b005b6102cd611336565b005b6102d76113b0565b6040516102e49190614e9c565b60405180910390f35b610307600480360381019061030291906147c6565b6113ed565b005b610323600480360381019061031e919061458f565b6119b4565b6040516103309190614d5b565b60405180910390f35b610341611a0e565b60405161034e9190614d5b565b60405180910390f35b61035f611a25565b60405161036c9190614cb7565b60405180910390f35b61037d611a49565b60405161038a9190614cb7565b60405180910390f35b61039b611a6f565b005b6103b760048036038101906103b291906146c3565b611ae9565b6040516103c49190614cb7565b60405180910390f35b6103e760048036038101906103e29190614687565b611b18565b6040516103f49190614d5b565b60405180910390f35b610405611b82565b6040516104129190614d76565b60405180910390f35b610423611b89565b6040516104309190615202565b60405180910390f35b610453600480360381019061044e91906147ef565b611bad565b005b61046f600480360381019061046a91906147ef565b612551565b005b61048b6004803603810190610486919061465e565b6134f7565b60405161049891906151be565b60405180910390f35b6104bb60048036038101906104b69190614687565b61351b565b005b6104d760048036038101906104d2919061458f565b61354f565b005b6104e16135a9565b6040516104ef929190614d32565b60405180910390f35b6105006135f6565b60405161050d9190614d76565b60405180910390f35b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105895750610588826136a3565b5b9050919050565b60008082600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561063a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106319061509e565b60405180910390fd5b6003600085815260200190815260200160002060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660036000868152602001908152602001600020600701549250925050915091565b600061069c611a0e565b156106dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d390614fde565b60405180910390fd5b60006106e8888861371d565b90506000811161072d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107249061501e565b60405180910390fd5b600180811115610766577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b89600181111561079f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156107ec5762278d008111156107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290614ffe565b60405180910390fd5b5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd61081061378e565b30866040518463ffffffff1660e01b815260040161083093929190614cd2565b600060405180830381600087803b15801561084a57600080fd5b505af115801561085e573d6000803e3d6000fd5b50505050600061086e600461379d565b9050604051806101a001604052808b60018111156108b5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016001151581526020018a81526020018981526020016108d761378e565b73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152506003600083815260200190815260200160002060008201518160000160006101000a81548160ff021916908360018111156109e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060208201518160000160016101000a81548160ff021916908315150217905550604082015181600101556060820151816002015560808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816005015560e08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061010082015181600701556101208201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610140820151816009015561016082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600b0155905050610bb660046137ab565b600060036000838152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff166001811115610c22577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001811115610c5a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820154815250509050806080015173ffffffffffffffffffffffffffffffffffffffff16827f4e400f43dce6cc22df28146360114559ffae81b0644d4752872c7def6d77319e8360000151846040015185606001518660a001518760c001518860e00151896101000151604051610ed99796959493929190614e2d565b60405180910390a3819350505050979650505050505050565b6000806000806000806000806000808a600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610fa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9f9061509e565b60405180910390fd5b6000600360008e8152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff166001811115611014577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600181111561104c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820154815250509050806000015181602001518260400151836060015184608001518560a001518660c001518761014001518861016001518961018001519b509b509b509b509b509b509b509b509b509b5050509193959799509193959799565b6000806000838152602001908152602001600020600101549050919050565b6112d882826137c1565b6112fd816001600085815260200190815260200160002061363790919063ffffffff16565b505050565b61130c82826137ea565b611331816001600085815260200190815260200160002061386d90919063ffffffff16565b505050565b6113677f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61136261378e565b611b18565b6113a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139d906150fe565b60405180910390fd5b6113ae61389d565b565b60606040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250905090565b6113f5611a0e565b15611435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142c90614fde565b60405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156114dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d39061509e565b60405180910390fd5b600060036000848152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff166001811115611548577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001811115611580577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b82015481525050905061179361378e565b73ffffffffffffffffffffffffffffffffffffffff16816080015173ffffffffffffffffffffffffffffffffffffffff1614806117e057506117df6000801b6117da61378e565b611b18565b5b61181f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118169061507e565b60405180910390fd5b8060200151611863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185a9061505e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1681610120015173ffffffffffffffffffffffffffffffffffffffff16146118d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ce9061503e565b60405180910390fd5b8060e0015173ffffffffffffffffffffffffffffffffffffffff166342842e0e3083608001518461010001516040518463ffffffff1660e01b815260040161192193929190614cd2565b600060405180830381600087803b15801561193b57600080fd5b505af115801561194f573d6000803e3d6000fd5b5050505060006003600085815260200190815260200160002060000160016101000a81548160ff021916908315150217905550827f61b9399f2f0f32ca39ce8d7be32caed5ec22fe07a6daba3a467ed479ec60658260405160405180910390a2505050565b6000600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000600260009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611aa07f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a611a9b61378e565b611b18565b611adf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad690614f1e565b60405180910390fd5b611ae761393f565b565b6000611b1082600160008681526020019081526020016000206139e290919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b7f000000000000000000000000000000000000000000000000000000000000000081565b611bb5611a0e565b15611bf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bec90614fde565b60405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c939061509e565b60405180910390fd5b600060036000858152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff166001811115611d08577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001811115611d40577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820154815250509050600180811115611f84577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600001516001811115611fc1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14612001576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff890614f7e565b60405180910390fd5b8060200151612045576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203c90614f5e565b60405180910390fd5b428160400151111561208c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612083906150de565b60405180910390fd5b428160600151116120d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c990614f3e565b60405180910390fd5b828160c001511115612119576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612110906150be565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1681610120015173ffffffffffffffffffffffffffffffffffffffff16146121b4578281610140015110612199576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121909061519e565b60405180910390fd5b6121b38160a00151308361012001518461014001516139fc565b5b6121bc61378e565b6003600086815260200190815260200160002060080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360008681526020019081526020016000206009018190555060036000858152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff166001811115612295577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60018111156122cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b8201548152505090506124f28160a00151826101200151308461014001516139fc565b80610120015173ffffffffffffffffffffffffffffffffffffffff16847f43c168f1d9d74d73325ab680f380bc731699766781190d47b123572b01b2fa2883610140015160405161254391906151be565b60405180910390a350505050565b612559611a0e565b15612599576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259090614fde565b60405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612640576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126379061509e565b60405180910390fd5b600060036000858152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff1660018111156126ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60018111156126e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b8201548152505090508060200151612933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292a90614efe565b60405180910390fd5b60006003600086815260200190815260200160002060000160016101000a81548160ff021916908315150217905550600080600181111561299d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826000015160018111156129da577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612b49574282604001511115612a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1e90614fbe565b60405180910390fd5b600082606001511480612a3d5750428260600151115b612a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7390614f9e565b60405180910390fd5b838260c001511115612ac3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aba9061513e565b60405180910390fd5b612acb61378e565b60036000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360036000878152602001908152602001600020600b0181905550612b4261378e565b9050612d9f565b600180811115612b82577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82600001516001811115612bbf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612d9e57600073ffffffffffffffffffffffffffffffffffffffff1682610120015173ffffffffffffffffffffffffffffffffffffffff161415612c3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c319061511e565b60405180910390fd5b612c4261378e565b73ffffffffffffffffffffffffffffffffffffffff1682610120015173ffffffffffffffffffffffffffffffffffffffff16148015612c85575042826060015111155b80612cc65750612c9361378e565b73ffffffffffffffffffffffffffffffffffffffff16826080015173ffffffffffffffffffffffffffffffffffffffff16145b80612ce15750612ce06000801b612cdb61378e565b611b18565b5b612d20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d179061515e565b60405180910390fd5b81610120015160036000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081610140015160036000878152602001908152602001600020600b01819055503090505b5b60036000868152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff166001811115612e09577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001811115612e41577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b8201548152505091506000826101800151111561341a576000826101800151905060006127107f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff168561018001516130a8919061531c565b6130b291906152eb565b90506130e48460a00151847f0000000000000000000000000000000000000000000000000000000000000000846139fc565b80826130f09190615376565b91508360e0015173ffffffffffffffffffffffffffffffffffffffff1663cad96cca8561010001516040518263ffffffff1660e01b815260040161313491906151be565b60006040518083038186803b15801561314c57600080fd5b505afa92505050801561318257506040513d6000823e3d601f19601f8201168201806040525081019061317f91906145f4565b60015b61327e578360e0015173ffffffffffffffffffffffffffffffffffffffff16632a55205a8561010001518661018001516040518363ffffffff1660e01b81526004016131cf9291906151d9565b604080518083038186803b1580156131e657600080fd5b505afa92505050801561321757506040513d601f19601f8201168201806040525081019061321491906145b8565b60015b61322057613279565b8173ffffffffffffffffffffffffffffffffffffffff16866080015173ffffffffffffffffffffffffffffffffffffffff1614613276576132678660a001518684846139fc565b80846132739190615376565b93505b50505b6133f9565b60008151905060005b818110156133f5578281815181106132c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16876080015173ffffffffffffffffffffffffffffffffffffffff16146133e2576000612710848381518110613348577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001516bffffffffffffffffffffffff16896101800151613372919061531c565b61337c91906152eb565b90506133d28860a00151888685815181106133c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160000151846139fc565b80866133de9190615376565b9550505b80806133ed90615505565b915050613287565b5050505b6000821115613417576134168460a00151848660800151856139fc565b5b50505b8160e0015173ffffffffffffffffffffffffffffffffffffffff166342842e0e308461016001518561010001516040518463ffffffff1660e01b815260040161346593929190614cd2565b600060405180830381600087803b15801561347f57600080fd5b505af1158015613493573d6000803e3d6000fd5b5050505081610160015173ffffffffffffffffffffffffffffffffffffffff16857f1e7abafb1a786c4e6394b5c494f50a97e3802ff2ce462eca4fe6a2dd4e1f92e88461018001516040516134e891906151be565b60405180910390a35050505050565b600061351460016000848152602001908152602001600020613b60565b9050919050565b6135258282613b75565b61354a816001600085815260200190815260200160002061386d90919063ffffffff16565b505050565b6000801b6135648161355f61378e565b613b9e565b81600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000807f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000915091509091565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000613624613667565b905090565b6136338282613c3b565b5050565b600061365f836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613d1b565b905092915050565b600060186000369050101580156136835750613682336119b4565b5b1561369757601436033560601c905061369f565b3390506136a0565b5b90565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480613716575061371582613d8b565b5b9050919050565b60008042841061372d578361372f565b425b905060008084146137405783613762565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b90508082111561377757600092505050613788565b81816137839190615376565b925050505b92915050565b600061379861361a565b905090565b600081600001549050919050565b6001816000016000828254019250508190555050565b6137ca826112af565b6137db816137d661378e565b613b9e565b6137e58383613c3b565b505050565b6137f261378e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461385f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138569061517e565b60405180910390fd5b6138698282613df5565b5050565b6000613895836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613ed6565b905092915050565b6138a5611a0e565b6138e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138db90614ede565b60405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61392861378e565b6040516139359190614cb7565b60405180910390a1565b613947611a0e565b15613987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161397e90614fde565b60405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586139cb61378e565b6040516139d89190614cb7565b60405180910390a1565b60006139f1836000018361405c565b60001c905092915050565b60008490503073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415613ac8578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401613a70929190614d09565b602060405180830381600087803b158015613a8a57600080fd5b505af1158015613a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac29190614635565b50613b59565b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd8585856040518463ffffffff1660e01b8152600401613b0593929190614cd2565b602060405180830381600087803b158015613b1f57600080fd5b505af1158015613b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b579190614635565b505b5050505050565b6000613b6e826000016140ad565b9050919050565b613b7e826112af565b613b8f81613b8a61378e565b613b9e565b613b998383613df5565b505050565b613ba88282611b18565b613c3757613bcd8173ffffffffffffffffffffffffffffffffffffffff1660146140be565b613bdb8360001c60206140be565b604051602001613bec929190614c7d565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c2e9190614e9c565b60405180910390fd5b5050565b613c458282611b18565b613d1757600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613cbc61378e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000613d2783836143b8565b613d80578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050613d85565b600090505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b613dff8282611b18565b15613ed257600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613e7761378e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008083600101600084815260200190815260200160002054905060008114614050576000600182613f089190615376565b9050600060018660000180549050613f209190615376565b9050818114613fdb576000866000018281548110613f67577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110613fb1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480614015577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050614056565b60009150505b92915050565b600082600001828154811061409a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b600081600001805490509050919050565b6060600060028360026140d1919061531c565b6140db9190615295565b67ffffffffffffffff81111561411a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561414c5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106141aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110614234577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002614274919061531c565b61427e9190615295565b90505b600181111561436a577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106142e6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110614323577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080614363906154aa565b9050614281565b50600084146143ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016143a590614ebe565b60405180910390fd5b8091505092915050565b600080836001016000848152602001908152602001600020541415905092915050565b60006143ee6143e984615242565b61521d565b9050808382526020820190508285604086028201111561440d57600080fd5b60005b8581101561443d57816144238882614504565b845260208401935060408301925050600181019050614410565b5050509392505050565b60008135905061445681615dc3565b92915050565b60008151905061446b81615dc3565b92915050565b60008151905061448081615dda565b92915050565b600082601f83011261449757600080fd5b81516144a78482602086016143db565b91505092915050565b6000815190506144bf81615df1565b92915050565b6000813590506144d481615e08565b92915050565b6000813590506144e981615e1f565b92915050565b6000813590506144fe81615e36565b92915050565b60006040828403121561451657600080fd5b614520604061521d565b9050600061453084828501614471565b60008301525060206145448482850161457a565b60208301525092915050565b60008135905061455f81615e46565b92915050565b60008151905061457481615e46565b92915050565b60008151905061458981615e5d565b92915050565b6000602082840312156145a157600080fd5b60006145af84828501614447565b91505092915050565b600080604083850312156145cb57600080fd5b60006145d98582860161445c565b92505060206145ea85828601614565565b9150509250929050565b60006020828403121561460657600080fd5b600082015167ffffffffffffffff81111561462057600080fd5b61462c84828501614486565b91505092915050565b60006020828403121561464757600080fd5b6000614655848285016144b0565b91505092915050565b60006020828403121561467057600080fd5b600061467e848285016144c5565b91505092915050565b6000806040838503121561469a57600080fd5b60006146a8858286016144c5565b92505060206146b985828601614447565b9150509250929050565b600080604083850312156146d657600080fd5b60006146e4858286016144c5565b92505060206146f585828601614550565b9150509250929050565b60006020828403121561471157600080fd5b600061471f848285016144da565b91505092915050565b600080600080600080600060e0888a03121561474357600080fd5b60006147518a828b016144ef565b97505060206147628a828b01614550565b96505060406147738a828b01614550565b95505060606147848a828b01614447565b94505060806147958a828b01614550565b93505060a06147a68a828b01614447565b92505060c06147b78a828b01614550565b91505092959891949750929550565b6000602082840312156147d857600080fd5b60006147e684828501614550565b91505092915050565b6000806040838503121561480257600080fd5b600061481085828601614550565b925050602061482185828601614550565b9150509250929050565b614834816153aa565b82525050565b614843816153ce565b82525050565b614852816153da565b82525050565b61486181615465565b82525050565b60006148728261526e565b61487c8185615279565b935061488c818560208601615477565b6148958161560a565b840191505092915050565b60006148ab8261526e565b6148b5818561528a565b93506148c5818560208601615477565b80840191505092915050565b60006148de602083615279565b91506148e98261561b565b602082019050919050565b6000614901601483615279565b915061490c82615644565b602082019050919050565b6000614924602f83615279565b915061492f8261566d565b604082019050919050565b6000614947603383615279565b9150614952826156bc565b604082019050919050565b600061496a603983615279565b91506149758261570b565b604082019050919050565b600061498d602e83615279565b91506149988261575a565b604082019050919050565b60006149b0603983615279565b91506149bb826157a9565b604082019050919050565b60006149d3603a83615279565b91506149de826157f8565b604082019050919050565b60006149f6603b83615279565b9150614a0182615847565b604082019050919050565b6000614a19601083615279565b9150614a2482615896565b602082019050919050565b6000614a3c605183615279565b9150614a47826158bf565b606082019050919050565b6000614a5f603583615279565b9150614a6a82615934565b604082019050919050565b6000614a82603583615279565b9150614a8d82615983565b604082019050919050565b6000614aa5603183615279565b9150614ab0826159d2565b604082019050919050565b6000614ac8603083615279565b9150614ad382615a21565b604082019050919050565b6000614aeb602683615279565b9150614af682615a70565b604082019050919050565b6000614b0e602c83615279565b9150614b1982615abf565b604082019050919050565b6000614b31603a83615279565b9150614b3c82615b0e565b604082019050919050565b6000614b5460178361528a565b9150614b5f82615b5d565b601782019050919050565b6000614b77603583615279565b9150614b8282615b86565b604082019050919050565b6000614b9a603e83615279565b9150614ba582615bd5565b604082019050919050565b6000614bbd603a83615279565b9150614bc882615c24565b604082019050919050565b6000614be060118361528a565b9150614beb82615c73565b601182019050919050565b6000614c03604c83615279565b9150614c0e82615c9c565b606082019050919050565b6000614c26602f83615279565b9150614c3182615d11565b604082019050919050565b6000614c49602c83615279565b9150614c5482615d60565b604082019050919050565b614c6881615443565b82525050565b614c778161544d565b82525050565b6000614c8882614b47565b9150614c9482856148a0565b9150614c9f82614bd3565b9150614cab82846148a0565b91508190509392505050565b6000602082019050614ccc600083018461482b565b92915050565b6000606082019050614ce7600083018661482b565b614cf4602083018561482b565b614d016040830184614c5f565b949350505050565b6000604082019050614d1e600083018561482b565b614d2b6020830184614c5f565b9392505050565b6000604082019050614d47600083018561482b565b614d546020830184614c6e565b9392505050565b6000602082019050614d70600083018461483a565b92915050565b6000602082019050614d8b6000830184614849565b92915050565b600061014082019050614da7600083018d614858565b614db4602083018c61483a565b614dc1604083018b614c5f565b614dce606083018a614c5f565b614ddb608083018961482b565b614de860a083018861482b565b614df560c0830187614c5f565b614e0260e0830186614c5f565b614e1061010083018561482b565b614e1e610120830184614c5f565b9b9a5050505050505050505050565b600060e082019050614e42600083018a614858565b614e4f6020830189614c5f565b614e5c6040830188614c5f565b614e69606083018761482b565b614e766080830186614c5f565b614e8360a083018561482b565b614e9060c0830184614c5f565b98975050505050505050565b60006020820190508181036000830152614eb68184614867565b905092915050565b60006020820190508181036000830152614ed7816148d1565b9050919050565b60006020820190508181036000830152614ef7816148f4565b9050919050565b60006020820190508181036000830152614f1781614917565b9050919050565b60006020820190508181036000830152614f378161493a565b9050919050565b60006020820190508181036000830152614f578161495d565b9050919050565b60006020820190508181036000830152614f7781614980565b9050919050565b60006020820190508181036000830152614f97816149a3565b9050919050565b60006020820190508181036000830152614fb7816149c6565b9050919050565b60006020820190508181036000830152614fd7816149e9565b9050919050565b60006020820190508181036000830152614ff781614a0c565b9050919050565b6000602082019050818103600083015261501781614a2f565b9050919050565b6000602082019050818103600083015261503781614a52565b9050919050565b6000602082019050818103600083015261505781614a75565b9050919050565b6000602082019050818103600083015261507781614a98565b9050919050565b6000602082019050818103600083015261509781614abb565b9050919050565b600060208201905081810360008301526150b781614ade565b9050919050565b600060208201905081810360008301526150d781614b01565b9050919050565b600060208201905081810360008301526150f781614b24565b9050919050565b6000602082019050818103600083015261511781614b6a565b9050919050565b6000602082019050818103600083015261513781614b8d565b9050919050565b6000602082019050818103600083015261515781614bb0565b9050919050565b6000602082019050818103600083015261517781614bf6565b9050919050565b6000602082019050818103600083015261519781614c19565b9050919050565b600060208201905081810360008301526151b781614c3c565b9050919050565b60006020820190506151d36000830184614c5f565b92915050565b60006040820190506151ee6000830185614c5f565b6151fb6020830184614c5f565b9392505050565b60006020820190506152176000830184614c6e565b92915050565b6000615227615238565b905061523382826154d4565b919050565b6000604051905090565b600067ffffffffffffffff82111561525d5761525c6155db565b5b602082029050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006152a082615443565b91506152ab83615443565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156152e0576152df61554e565b5b828201905092915050565b60006152f682615443565b915061530183615443565b9250826153115761531061557d565b5b828204905092915050565b600061532782615443565b915061533283615443565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561536b5761536a61554e565b5b828202905092915050565b600061538182615443565b915061538c83615443565b92508282101561539f5761539e61554e565b5b828203905092915050565b60006153b582615423565b9050919050565b60006153c782615423565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600081905061541e82615daf565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b600061547082615410565b9050919050565b60005b8381101561549557808201518184015260208101905061547a565b838111156154a4576000848401525b50505050565b60006154b582615443565b915060008214156154c9576154c861554e565b5b600182039050919050565b6154dd8261560a565b810181811067ffffffffffffffff821117156154fc576154fb6155db565b5b80604052505050565b600061551082615443565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156155435761554261554e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f2066696c6c0000000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d7573742068617665207060008201527f617573657220726f6c6520746f20706175736500000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f20626964202d20746f6f206c61746500000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f20626964000000000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f66206b696e642061756374696f6e20746f2062696400000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f2066696c6c202d20746f6f206c617465000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f2066696c6c202d20746f6f206561726c790000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206f66206b6960008201527f6e642061756374696f6e206d757374206e6f74206265206f70656e20666f722060208201527f6d6f7265207468616e2033302064617973000000000000000000000000000000604082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20617420736f6d6520706f696e740000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f68617665206e6f2062696420746f2063616e63656c0000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f2063616e63656c000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d7573742062652074686560008201527f206d616b657220746f2063616e63656c00000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206e6f6e657860008201527f697374656e740000000000000000000000000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d757374206d617463682060008201527f707269636520746f206269640000000000000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f20626964202d20746f6f206561726c79000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d7573742068617665207060008201527f617573657220726f6c6520746f20756e70617573650000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f686176652062696420746f2066696c6c2061756374696f6e206f726465720000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d757374206d617463682060008201527f707269636520746f2066696c6c20646972656374206f72646572000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d7573742062652074686560008201527f206d616b6572206f722066696e616c2062696464657220746f2066696c6c206160208201527f756374696f6e206f726465720000000000000000000000000000000000000000604082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d7573742073757270617360008201527f732062696420746f206269640000000000000000000000000000000000000000602082015250565b60028110615dc057615dbf6155ac565b5b50565b615dcc816153aa565b8114615dd757600080fd5b50565b615de3816153bc565b8114615dee57600080fd5b50565b615dfa816153ce565b8114615e0557600080fd5b50565b615e11816153da565b8114615e1c57600080fd5b50565b615e28816153e4565b8114615e3357600080fd5b50565b60028110615e4357600080fd5b50565b615e4f81615443565b8114615e5a57600080fd5b50565b615e668161544d565b8114615e7157600080fd5b5056fea26469706673582212200e0cca03051c75bb4c4df45e416ee8e925225a44de1dba181043391302f5c77f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 325,
        "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)1516_storage)"
      },
      {
        "astId": 601,
        "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2955,
        "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
        "label": "trustedForwarder",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1928,
        "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
        "label": "_orders",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Order)1923_storage)"
      },
      {
        "astId": 1931,
        "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
        "label": "_orderIdTracker",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)897_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(OrderKind)1854": {
        "encoding": "inplace",
        "label": "enum LemonadeMarketplace.OrderKind",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)1516_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1516_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Order)1923_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LemonadeMarketplace.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)1923_storage"
      },
      "t_struct(AddressSet)1516_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1515,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1215_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)897_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 896,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Order)1923_storage": {
        "encoding": "inplace",
        "label": "struct LemonadeMarketplace.Order",
        "members": [
          {
            "astId": 1898,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "kind",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(OrderKind)1854"
          },
          {
            "astId": 1900,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "open",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1902,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "openFrom",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1904,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "openTo",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1906,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "maker",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1908,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "currency",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1910,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1912,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "tokenContract",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1914,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "tokenId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1916,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "bidder",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 1918,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "bidAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 1920,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "taker",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 1922,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "paidAmount",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1215_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1210,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1214,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}