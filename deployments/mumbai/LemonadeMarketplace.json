{
  "address": "0xbc6C027B7F0CA2BEb0d71E479a05758187d4ea63",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeMaker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "feeFraction",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "OrderBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "OrderCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum LemonadeMarketplace.OrderKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openFrom",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openTo",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paidAmount",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_FRACTION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_MAKER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "bidOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LemonadeMarketplace.OrderKind",
          "name": "kind",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "openFrom",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openTo",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fillOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "order",
      "outputs": [
        {
          "internalType": "enum LemonadeMarketplace.OrderKind",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b1630a0375cecba0c99dee72c31ff12c12f0502377847098720f1624788204b",
  "receipt": {
    "to": null,
    "from": "0x951292004e8a18955Cb1095CB72Ca6B01d68336E",
    "contractAddress": "0xbc6C027B7F0CA2BEb0d71E479a05758187d4ea63",
    "transactionIndex": 1,
    "gasUsed": "5178358",
    "logsBloom": "0x
    "blockHash": "0xe66fe325afc7775f2171be5e8763ba200a222211f5f00ac5e17488bc0d6db36a",
    "transactionHash": "0x8b1630a0375cecba0c99dee72c31ff12c12f0502377847098720f1624788204b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 21035765,
        "transactionHash": "0x8b1630a0375cecba0c99dee72c31ff12c12f0502377847098720f1624788204b",
        "address": "0xbc6C027B7F0CA2BEb0d71E479a05758187d4ea63",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xe66fe325afc7775f2171be5e8763ba200a222211f5f00ac5e17488bc0d6db36a"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 21035765,
        "transactionHash": "0x8b1630a0375cecba0c99dee72c31ff12c12f0502377847098720f1624788204b",
        "address": "0xbc6C027B7F0CA2BEb0d71E479a05758187d4ea63",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xe66fe325afc7775f2171be5e8763ba200a222211f5f00ac5e17488bc0d6db36a"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 21035765,
        "transactionHash": "0x8b1630a0375cecba0c99dee72c31ff12c12f0502377847098720f1624788204b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000373111475454000000000000000000000000000000000000000000000000000ebd7196a7968e000000000000000000000000000000000000000000000001131737c6702b819d6a0000000000000000000000000000000000000000000000000e86408560423a00000000000000000000000000000000000000000000000113176ef78172d5f16a",
        "logIndex": 4,
        "blockHash": "0xe66fe325afc7775f2171be5e8763ba200a222211f5f00ac5e17488bc0d6db36a"
      }
    ],
    "blockNumber": 21035765,
    "cumulativeGasUsed": "5366056",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x951292004e8a18955Cb1095CB72Ca6B01d68336E",
    "20000000000000000"
  ],
  "solcInputHash": "1c1e32fc40ded2fd53598ea29641632d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMaker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeFraction\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"OrderBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum LemonadeMarketplace.OrderKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openTo\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidAmount\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_FRACTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_MAKER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bidOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LemonadeMarketplace.OrderKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"openFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openTo\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fillOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"order\",\"outputs\":[{\"internalType\":\"enum LemonadeMarketplace.OrderKind\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LemonadeMarketplace.sol\":\"LemonadeMarketplace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/IERC721Royalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional royalty extension\\n */\\ninterface IERC721Royalty is IERC721 {\\n    /**\\n     * @dev Returns the royalty maker and fraction for `tokenId` token.\\n     */\\n    function royalty(uint256 tokenId) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xb4fc3d8fdfda58e6da58442d3de76a777dcac21797efed4cc4f1e369926b85e2\",\"license\":\"MIT\"},\"contracts/LemonadeMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./IERC721Royalty.sol\\\";\\n\\ncontract LemonadeMarketplace is AccessControlEnumerable, Pausable {\\n    using Counters for Counters.Counter;\\n\\n    address public immutable FEE_MAKER;\\n    uint256 public immutable FEE_FRACTION;\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    enum OrderKind { Direct, Auction }\\n\\n    event OrderCreated(uint256 indexed orderId, OrderKind kind, uint256 openFrom, uint256 openTo, address indexed maker, address currency, uint256 price, address tokenContract, uint256 tokenId);\\n    event OrderBid(uint256 indexed orderId, address indexed bidder, uint256 bidAmount);\\n    event OrderFilled(uint256 indexed orderId, address indexed taker, uint256 paidAmount);\\n    event OrderCancelled(uint256 indexed orderId);\\n\\n    struct Order {\\n        OrderKind kind;\\n        bool open;\\n        uint256 openFrom;\\n        uint256 openTo;\\n        address maker;\\n        address currency;\\n        uint256 price;\\n        address tokenContract;\\n        uint256 tokenId;\\n        address bidder;\\n        uint256 bidAmount;\\n        address taker;\\n        uint256 paidAmount;\\n    }\\n    mapping (uint256 => Order) private _orders;\\n\\n    Counters.Counter private _orderIdTracker;\\n\\n    constructor(address feeMaker, uint256 feeFraction) {\\n        FEE_MAKER = feeMaker;\\n        FEE_FRACTION = feeFraction;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function fee()\\n        public\\n        view\\n        returns (address, uint256)\\n    {\\n        return (FEE_MAKER, FEE_FRACTION);\\n    }\\n\\n    function order(uint256 orderId)\\n        public\\n        virtual\\n        view\\n        whenExists(orderId)\\n        returns (OrderKind, bool, uint, uint, address, address, uint256, uint256, address, uint256)\\n    {\\n        Order memory order_ = _orders[orderId];\\n        return (order_.kind, order_.open, order_.openFrom, order_.openTo, order_.maker, order_.currency, order_.price, order_.bidAmount, order_.taker, order_.paidAmount);\\n    }\\n\\n    function token(uint256 orderId)\\n        public\\n        virtual\\n        view\\n        whenExists(orderId)\\n        returns (address, uint256)\\n    {\\n        Order memory order_ = _orders[orderId];\\n        return (order_.tokenContract, order_.tokenId);\\n    }\\n\\n    function createOrder(OrderKind kind, uint openFrom, uint openTo, address currency, uint256 price, address tokenContract, uint256 tokenId)\\n        public\\n        virtual\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        uint openDuration_ = openDuration(openFrom, openTo);\\n\\n        require(openDuration_ > 0, \\\"LemonadeMarketplace: order must be open at some point\\\");\\n\\n        if (kind == OrderKind.Auction) {\\n            require(openDuration_ <= 7 * 24 * 60 * 60, \\\"LemonadeMarketplace: order of kind auction must not be open for more than 7 days\\\");\\n        }\\n\\n        IERC721(tokenContract).transferFrom(_msgSender(), address(this), tokenId);\\n\\n        uint256 orderId = _orderIdTracker.current();\\n\\n        _orders[orderId] = Order({\\n            kind: kind,\\n            open: true,\\n            openFrom: openFrom,\\n            openTo: openTo,\\n            maker: _msgSender(),\\n            currency: currency,\\n            price: price,\\n            tokenContract: tokenContract,\\n            tokenId: tokenId,\\n            bidder: address(0),\\n            bidAmount: 0,\\n            taker: address(0),\\n            paidAmount: 0\\n        });\\n\\n        _orderIdTracker.increment();\\n\\n        Order memory order_ = _orders[orderId];\\n        emit OrderCreated(orderId, order_.kind, order_.openFrom, order_.openTo, order_.maker, order_.currency, order_.price, order_.tokenContract, order_.tokenId);\\n        return orderId;\\n    }\\n\\n    function cancelOrder(uint256 orderId)\\n        public\\n        virtual\\n        whenNotPaused\\n        whenExists(orderId)\\n    {\\n        Order memory order_ = _orders[orderId];\\n        require(order_.maker == _msgSender() || hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"LemonadeMarketplace: must be the maker to cancel\\\");\\n        require(order_.open, \\\"LemonadeMarketplace: order must be open to cancel\\\");\\n        require(order_.bidder == address(0), \\\"LemonadeMarketplace: order must have no bid to cancel\\\");\\n\\n        IERC721(order_.tokenContract).safeTransferFrom(address(this), order_.maker, order_.tokenId);\\n\\n        _orders[orderId].open = false;\\n        emit OrderCancelled(orderId);\\n    }\\n\\n    function bidOrder(uint256 orderId, uint256 amount)\\n        public\\n        virtual\\n        whenNotPaused\\n        whenExists(orderId)\\n    {\\n        Order memory order_ = _orders[orderId];\\n        require(order_.kind == OrderKind.Auction, \\\"LemonadeMarketplace: order must be of kind auction to bid\\\");\\n        require(order_.open, \\\"LemonadeMarketplace: order must be open to bid\\\");\\n        require(order_.openFrom <= block.timestamp, \\\"LemonadeMarketplace: order must be open to bid - too early\\\");\\n        require(order_.openTo > block.timestamp, \\\"LemonadeMarketplace: order must be open to bid - too late\\\");\\n        require(order_.price <= amount, \\\"LemonadeMarketplace: must match price to bid\\\");\\n\\n        if (order_.bidder != address(0)) {\\n            require(order_.bidAmount < amount, \\\"LemonadeMarketplace: must surpass bid to bid\\\");\\n\\n            transferERC20(order_.currency, address(this), order_.bidder, order_.bidAmount);\\n        }\\n\\n        _orders[orderId].bidder = _msgSender();\\n        _orders[orderId].bidAmount = amount;\\n        order_ = _orders[orderId];\\n\\n        transferERC20(order_.currency, order_.bidder, address(this), order_.bidAmount);\\n\\n        emit OrderBid(orderId, order_.bidder, order_.bidAmount);\\n    }\\n\\n    function fillOrder(uint256 orderId, uint256 amount)\\n        public\\n        virtual\\n        whenNotPaused\\n        whenExists(orderId)\\n    {\\n        Order memory order_ = _orders[orderId];\\n        require(order_.open, \\\"LemonadeMarketplace: order must be open to fill\\\");\\n\\n        _orders[orderId].open = false;\\n        address spender;\\n\\n        if (order_.kind == OrderKind.Direct) {\\n            require(order_.openFrom <= block.timestamp, \\\"LemonadeMarketplace: order must be open to fill - too early\\\");\\n            require(order_.openTo == 0 || order_.openTo > block.timestamp, \\\"LemonadeMarketplace: order must be open to fill - too late\\\");\\n            require(order_.price <= amount, \\\"LemonadeMarketplace: must match price to fill direct order\\\");\\n\\n            _orders[orderId].taker = _msgSender();\\n            _orders[orderId].paidAmount = amount;\\n            spender = _msgSender();\\n        } else if (order_.kind == OrderKind.Auction) {\\n            require((order_.bidder != address(0)), \\\"LemonadeMarketplace: order must have bid to fill auction order\\\");\\n            require((order_.bidder == _msgSender() && order_.openTo <= block.timestamp)\\n                    || order_.maker == _msgSender() || hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\\n                \\\"LemonadeMarketplace: must be the maker or final bidder to fill auction order\\\"\\n            );\\n\\n            _orders[orderId].taker = order_.bidder;\\n            _orders[orderId].paidAmount = order_.bidAmount;\\n            spender = address(this);\\n        }\\n\\n        order_ = _orders[orderId];\\n\\n        if (order_.paidAmount > 0) {\\n            uint256 transferAmount = order_.paidAmount;\\n\\n            uint256 feeAmount = order_.paidAmount * FEE_FRACTION / 10 ** 18;\\n            transferERC20(order_.currency, spender, FEE_MAKER, feeAmount);\\n            transferAmount -= feeAmount;\\n\\n            try IERC721Royalty(order_.tokenContract).royalty(order_.tokenId) returns (address royaltyMaker, uint256 royaltyFraction) {\\n                if (order_.maker != royaltyMaker) {\\n                    uint256 royaltyAmount = order_.paidAmount * royaltyFraction / 10 ** 18;\\n                    transferERC20(order_.currency, spender, royaltyMaker, royaltyAmount);\\n                    transferAmount -= royaltyAmount;\\n                }\\n            } catch { }\\n\\n            if (transferAmount > 0) {\\n                transferERC20(order_.currency, spender, order_.maker, transferAmount);\\n            }\\n        }\\n\\n        IERC721(order_.tokenContract).safeTransferFrom(address(this), order_.taker, order_.tokenId);\\n\\n        emit OrderFilled(orderId, order_.taker, order_.paidAmount);\\n    }\\n\\n    function transferERC20(address currency_, address spender, address recipient, uint256 amount)\\n        private\\n    {\\n        IERC20 currency = IERC20(currency_);\\n\\n        if (spender == address(this)) {\\n            currency.transfer(recipient, amount);\\n        } else {\\n            currency.transferFrom(spender, recipient, amount); // requires allowance\\n        }\\n    }\\n\\n    function openDuration(uint openFrom, uint openTo)\\n        private\\n        view\\n        returns (uint)\\n    {\\n        uint start = openFrom < block.timestamp ? block.timestamp : openFrom;\\n        uint end = openTo == 0 ? type(uint).max : openTo;\\n\\n        if (start > end) { // avoids overflow\\n            return 0;\\n        }\\n\\n        return end - start;\\n    }\\n\\n    modifier whenExists(uint256 orderId) {\\n        require(_orders[orderId].maker != address(0), \\\"LemonadeMarketplace: order nonexistent\\\");\\n        _;\\n    }\\n\\n    function pause()\\n        public\\n        virtual\\n    {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"LemonadeMarketplace: must have pauser role to pause\\\");\\n        _pause();\\n    }\\n\\n    function unpause()\\n        public\\n        virtual\\n    {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"LemonadeMarketplace: must have pauser role to unpause\\\");\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xf8be3ed156211215432e3e1ba54a1781665e9ab456d753f410e9b35bfa90fca4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162005e5638038062005e568339818101604052810190620000379190620003c2565b6000600260006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508060a08181525050620000b56000801b620000a9620000fe60201b60201c565b6200010660201b60201c565b620000f67f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a620000ea620000fe60201b60201c565b6200010660201b60201c565b505062000475565b600033905090565b6200011d82826200014e60201b620034a21760201c565b6200014981600160008581526020019081526020016000206200016460201b620034b01790919060201c565b505050565b6200016082826200019c60201b60201c565b5050565b600062000194836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200028d60201b60201c565b905092915050565b620001ae82826200030760201b60201c565b6200028957600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200022e620000fe60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620002a183836200037160201b60201c565b620002fc57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000301565b600090505b92915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050620003a58162000441565b92915050565b600081519050620003bc816200045b565b92915050565b60008060408385031215620003d657600080fd5b6000620003e68582860162000394565b9250506020620003f985828601620003ab565b9150509250929050565b6000620004108262000417565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200044c8162000403565b81146200045857600080fd5b50565b620004668162000437565b81146200047257600080fd5b50565b60805160601c60a05161599c620004ba6000396000818161108d0152818161314d015261345701526000818161156f015281816131930152613436015261599c6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80635c975abb116100b8578063b858fb5f1161007c578063b858fb5f14610381578063c37dfc5b1461039d578063ca15c873146103b9578063d547741f146103e9578063ddca3f4314610405578063e63ab1e91461042457610142565b80635c975abb146102db5780638456cb59146102f95780639010d07c1461030357806391d1485414610333578063a217fddf1461036357610142565b8063248a9ca31161010a578063248a9ca31461022f5780632f2ff15d1461025f57806336568abe1461027b5780633f4ba83a146102975780634ecd9f7e146102a1578063514fcac7146102bf57610142565b806301ffc9a714610147578063044215c6146101775780630c109710146101a85780631b1c61e1146101d857806321603f43146101f6575b600080fd5b610161600480360381019061015c91906143bf565b610442565b60405161016e91906149e3565b60405180910390f35b610191600480360381019061018c9190614486565b6104bc565b60405161019f9291906149ba565b60405180910390f35b6101c260048036038101906101bd91906143e8565b61082b565b6040516101cf9190614e46565b60405180910390f35b6101e061108b565b6040516101ed9190614e46565b60405180910390f35b610210600480360381019061020b9190614486565b6110af565b6040516102269a99989796959493929190614a19565b60405180910390f35b6102496004803603810190610244919061431e565b61146c565b60405161025691906149fe565b60405180910390f35b61027960048036038101906102749190614347565b61148b565b005b61029560048036038101906102909190614347565b6114bf565b005b61029f6114f3565b005b6102a961156d565b6040516102b69190614968565b60405180910390f35b6102d960048036038101906102d49190614486565b611591565b005b6102e3611b58565b6040516102f091906149e3565b60405180910390f35b610301611b6f565b005b61031d60048036038101906103189190614383565b611be9565b60405161032a9190614968565b60405180910390f35b61034d60048036038101906103489190614347565b611c18565b60405161035a91906149e3565b60405180910390f35b61036b611c82565b60405161037891906149fe565b60405180910390f35b61039b600480360381019061039691906144af565b611c89565b005b6103b760048036038101906103b291906144af565b61262d565b005b6103d360048036038101906103ce919061431e565b6133d9565b6040516103e09190614e46565b60405180910390f35b61040360048036038101906103fe9190614347565b6133fd565b005b61040d613431565b60405161041b9291906149ba565b60405180910390f35b61042c61347e565b60405161043991906149fe565b60405180910390f35b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104b557506104b4826134e0565b5b9050919050565b60008082600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055d90614d26565b60405180910390fd5b600060036000868152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff1660018111156105d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600181111561060a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b8201548152505090508060e00151816101000151935093505050915091565b6000610835611b58565b15610875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086c90614c86565b60405180910390fd5b6000610881888861355a565b9050600081116108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd90614ca6565b60405180910390fd5b6001808111156108ff577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b896001811115610938577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156109855762093a80811115610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097b90614c06565b60405180910390fd5b5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd6109a96135cb565b30866040518463ffffffff1660e01b81526004016109c993929190614983565b600060405180830381600087803b1580156109e357600080fd5b505af11580156109f7573d6000803e3d6000fd5b505050506000610a0760046135d3565b9050604051806101a001604052808b6001811115610a4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016001151581526020018a8152602001898152602001610a706135cb565b73ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152506003600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690836001811115610b79577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555060208201518160000160016101000a81548160ff021916908315150217905550604082015181600101556060820151816002015560808201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816005015560e08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061010082015181600701556101208201518160080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610140820151816009015561016082015181600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600b0155905050610d4f60046135e1565b600060036000838152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff166001811115610dbb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001811115610df3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820154815250509050806080015173ffffffffffffffffffffffffffffffffffffffff16827f4e400f43dce6cc22df28146360114559ffae81b0644d4752872c7def6d77319e8360000151846040015185606001518660a001518760c001518860e001518961010001516040516110729796959493929190614ab5565b60405180910390a3819350505050979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806000806000806000806000808a600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115c90614d26565b60405180910390fd5b6000600360008e8152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff1660018111156111d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001811115611209577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820154815250509050806000015181602001518260400151836060015184608001518560a001518660c001518761014001518861016001518961018001519b509b509b509b509b509b509b509b509b509b5050509193959799509193959799565b6000806000838152602001908152602001600020600101549050919050565b61149582826135f7565b6114ba81600160008581526020019081526020016000206134b090919063ffffffff16565b505050565b6114c98282613620565b6114ee81600160008581526020019081526020016000206136a390919063ffffffff16565b505050565b6115247f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61151f6135cb565b611c18565b611563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155a90614d86565b60405180910390fd5b61156b6136d3565b565b7f000000000000000000000000000000000000000000000000000000000000000081565b611599611b58565b156115d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d090614c86565b60405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611680576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167790614d26565b60405180910390fd5b600060036000848152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff1660018111156116ec577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001811115611724577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b8201548152505090506119376135cb565b73ffffffffffffffffffffffffffffffffffffffff16816080015173ffffffffffffffffffffffffffffffffffffffff16148061198457506119836000801b61197e6135cb565b611c18565b5b6119c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ba90614d06565b60405180910390fd5b8060200151611a07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fe90614ce6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1681610120015173ffffffffffffffffffffffffffffffffffffffff1614611a7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7290614cc6565b60405180910390fd5b8060e0015173ffffffffffffffffffffffffffffffffffffffff166342842e0e3083608001518461010001516040518463ffffffff1660e01b8152600401611ac593929190614983565b600060405180830381600087803b158015611adf57600080fd5b505af1158015611af3573d6000803e3d6000fd5b5050505060006003600085815260200190815260200160002060000160016101000a81548160ff021916908315150217905550827f61b9399f2f0f32ca39ce8d7be32caed5ec22fe07a6daba3a467ed479ec60658260405160405180910390a2505050565b6000600260009054906101000a900460ff16905090565b611ba07f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a611b9b6135cb565b611c18565b611bdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd690614ba6565b60405180910390fd5b611be7613775565b565b6000611c10826001600086815260200190815260200160002061381890919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b81565b611c91611b58565b15611cd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc890614c86565b60405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611d78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6f90614d26565b60405180910390fd5b600060036000858152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff166001811115611de4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001811115611e1c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820154815250509050600180811115612060577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160000151600181111561209d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146120dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d490614c26565b60405180910390fd5b8060200151612121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211890614be6565b60405180910390fd5b4281604001511115612168576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215f90614d66565b60405180910390fd5b428160600151116121ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a590614bc6565b60405180910390fd5b828160c0015111156121f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ec90614d46565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1681610120015173ffffffffffffffffffffffffffffffffffffffff1614612290578281610140015110612275576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226c90614e26565b60405180910390fd5b61228f8160a0015130836101200151846101400151613832565b5b6122986135cb565b6003600086815260200190815260200160002060080160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360008681526020019081526020016000206009018190555060036000858152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff166001811115612371577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60018111156123a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b8201548152505090506125ce8160a0015182610120015130846101400151613832565b80610120015173ffffffffffffffffffffffffffffffffffffffff16847f43c168f1d9d74d73325ab680f380bc731699766781190d47b123572b01b2fa2883610140015160405161261f9190614e46565b60405180910390a350505050565b612635611b58565b15612675576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266c90614c86565b60405180910390fd5b81600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561271c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161271390614d26565b60405180910390fd5b600060036000858152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff166001811115612788577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60018111156127c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b8201548152505090508060200151612a0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0690614b86565b60405180910390fd5b60006003600086815260200190815260200160002060000160016101000a81548160ff0219169083151502179055506000806001811115612a79577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82600001516001811115612ab6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612c25574282604001511115612b03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612afa90614c66565b60405180910390fd5b600082606001511480612b195750428260600151115b612b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4f90614c46565b60405180910390fd5b838260c001511115612b9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b9690614dc6565b60405180910390fd5b612ba76135cb565b60036000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360036000878152602001908152602001600020600b0181905550612c1e6135cb565b9050612e7b565b600180811115612c5e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82600001516001811115612c9b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612e7a57600073ffffffffffffffffffffffffffffffffffffffff1682610120015173ffffffffffffffffffffffffffffffffffffffff161415612d16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0d90614da6565b60405180910390fd5b612d1e6135cb565b73ffffffffffffffffffffffffffffffffffffffff1682610120015173ffffffffffffffffffffffffffffffffffffffff16148015612d61575042826060015111155b80612da25750612d6f6135cb565b73ffffffffffffffffffffffffffffffffffffffff16826080015173ffffffffffffffffffffffffffffffffffffffff16145b80612dbd5750612dbc6000801b612db76135cb565b611c18565b5b612dfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df390614de6565b60405180910390fd5b81610120015160036000878152602001908152602001600020600a0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081610140015160036000878152602001908152602001600020600b01819055503090505b5b60036000868152602001908152602001600020604051806101a00160405290816000820160009054906101000a900460ff166001811115612ee5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6001811115612f1d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81526020016000820160019054906101000a900460ff1615151515815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600782015481526020016008820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160098201548152602001600a820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820154815250509150600082610180015111156132fc57600082610180015190506000670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000085610180015161317c9190614f0f565b6131869190614ede565b90506131b88460a00151847f000000000000000000000000000000000000000000000000000000000000000084613832565b80826131c49190614f69565b91508360e0015173ffffffffffffffffffffffffffffffffffffffff1663e814cb718561010001516040518263ffffffff1660e01b81526004016132089190614e46565b604080518083038186803b15801561321f57600080fd5b505afa92505050801561325057506040513d601f19601f8201168201806040525081019061324d91906142b9565b60015b613259576132db565b8173ffffffffffffffffffffffffffffffffffffffff16866080015173ffffffffffffffffffffffffffffffffffffffff16146132d8576000670de0b6b3a7640000828861018001516132ac9190614f0f565b6132b69190614ede565b90506132c88760a00151878584613832565b80856132d49190614f69565b9450505b50505b60008211156132f9576132f88460a0015184866080015185613832565b5b50505b8160e0015173ffffffffffffffffffffffffffffffffffffffff166342842e0e308461016001518561010001516040518463ffffffff1660e01b815260040161334793929190614983565b600060405180830381600087803b15801561336157600080fd5b505af1158015613375573d6000803e3d6000fd5b5050505081610160015173ffffffffffffffffffffffffffffffffffffffff16857f1e7abafb1a786c4e6394b5c494f50a97e3802ff2ce462eca4fe6a2dd4e1f92e88461018001516040516133ca9190614e46565b60405180910390a35050505050565b60006133f660016000848152602001908152602001600020613996565b9050919050565b61340782826139ab565b61342c81600160008581526020019081526020016000206136a390919063ffffffff16565b505050565b6000807f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000915091509091565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6134ac82826139d4565b5050565b60006134d8836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613ab4565b905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480613553575061355282613b24565b5b9050919050565b60008042841061356a578361356c565b425b9050600080841461357d578361359f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b9050808211156135b4576000925050506135c5565b81816135c09190614f69565b925050505b92915050565b600033905090565b600081600001549050919050565b6001816000016000828254019250508190555050565b6136008261146c565b6136118161360c6135cb565b613b8e565b61361b83836139d4565b505050565b6136286135cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614613695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161368c90614e06565b60405180910390fd5b61369f8282613c2b565b5050565b60006136cb836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613d0c565b905092915050565b6136db611b58565b61371a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161371190614b66565b60405180910390fd5b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61375e6135cb565b60405161376b9190614968565b60405180910390a1565b61377d611b58565b156137bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137b490614c86565b60405180910390fd5b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586138016135cb565b60405161380e9190614968565b60405180910390a1565b60006138278360000183613e92565b60001c905092915050565b60008490503073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156138fe578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b81526004016138a69291906149ba565b602060405180830381600087803b1580156138c057600080fd5b505af11580156138d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138f891906142f5565b5061398f565b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd8585856040518463ffffffff1660e01b815260040161393b93929190614983565b602060405180830381600087803b15801561395557600080fd5b505af1158015613969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061398d91906142f5565b505b5050505050565b60006139a482600001613ee3565b9050919050565b6139b48261146c565b6139c5816139c06135cb565b613b8e565b6139cf8383613c2b565b505050565b6139de8282611c18565b613ab057600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613a556135cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000613ac08383613ef4565b613b19578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050613b1e565b600090505b92915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b613b988282611c18565b613c2757613bbd8173ffffffffffffffffffffffffffffffffffffffff166014613f17565b613bcb8360001c6020613f17565b604051602001613bdc92919061492e565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c1e9190614b24565b60405180910390fd5b5050565b613c358282611c18565b15613d0857600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613cad6135cb565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008083600101600084815260200190815260200160002054905060008114613e86576000600182613d3e9190614f69565b9050600060018660000180549050613d569190614f69565b9050818114613e11576000866000018281548110613d9d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110613de7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480613e4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050613e8c565b60009150505b92915050565b6000826000018281548110613ed0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b606060006002836002613f2a9190614f0f565b613f349190614e88565b67ffffffffffffffff811115613f73577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613fa55781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110614003577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061408d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026140cd9190614f0f565b6140d79190614e88565b90505b60018111156141c3577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061413f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b82828151811061417c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806141bc90615073565b90506140da565b5060008414614207576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016141fe90614b46565b60405180910390fd5b8091505092915050565b600081359050614220816158e3565b92915050565b600081519050614235816158e3565b92915050565b60008151905061424a816158fa565b92915050565b60008135905061425f81615911565b92915050565b60008135905061427481615928565b92915050565b6000813590506142898161593f565b92915050565b60008135905061429e8161594f565b92915050565b6000815190506142b38161594f565b92915050565b600080604083850312156142cc57600080fd5b60006142da85828601614226565b92505060206142eb858286016142a4565b9150509250929050565b60006020828403121561430757600080fd5b60006143158482850161423b565b91505092915050565b60006020828403121561433057600080fd5b600061433e84828501614250565b91505092915050565b6000806040838503121561435a57600080fd5b600061436885828601614250565b925050602061437985828601614211565b9150509250929050565b6000806040838503121561439657600080fd5b60006143a485828601614250565b92505060206143b58582860161428f565b9150509250929050565b6000602082840312156143d157600080fd5b60006143df84828501614265565b91505092915050565b600080600080600080600060e0888a03121561440357600080fd5b60006144118a828b0161427a565b97505060206144228a828b0161428f565b96505060406144338a828b0161428f565b95505060606144448a828b01614211565b94505060806144558a828b0161428f565b93505060a06144668a828b01614211565b92505060c06144778a828b0161428f565b91505092959891949750929550565b60006020828403121561449857600080fd5b60006144a68482850161428f565b91505092915050565b600080604083850312156144c257600080fd5b60006144d08582860161428f565b92505060206144e18582860161428f565b9150509250929050565b6144f481614f9d565b82525050565b61450381614faf565b82525050565b61451281614fbb565b82525050565b6145218161502e565b82525050565b600061453282614e61565b61453c8185614e6c565b935061454c818560208601615040565b6145558161512a565b840191505092915050565b600061456b82614e61565b6145758185614e7d565b9350614585818560208601615040565b80840191505092915050565b600061459e602083614e6c565b91506145a98261513b565b602082019050919050565b60006145c1601483614e6c565b91506145cc82615164565b602082019050919050565b60006145e4602f83614e6c565b91506145ef8261518d565b604082019050919050565b6000614607603383614e6c565b9150614612826151dc565b604082019050919050565b600061462a603983614e6c565b91506146358261522b565b604082019050919050565b600061464d602e83614e6c565b91506146588261527a565b604082019050919050565b6000614670605083614e6c565b915061467b826152c9565b606082019050919050565b6000614693603983614e6c565b915061469e8261533e565b604082019050919050565b60006146b6603a83614e6c565b91506146c18261538d565b604082019050919050565b60006146d9603b83614e6c565b91506146e4826153dc565b604082019050919050565b60006146fc601083614e6c565b91506147078261542b565b602082019050919050565b600061471f603583614e6c565b915061472a82615454565b604082019050919050565b6000614742603583614e6c565b915061474d826154a3565b604082019050919050565b6000614765603183614e6c565b9150614770826154f2565b604082019050919050565b6000614788603083614e6c565b915061479382615541565b604082019050919050565b60006147ab602683614e6c565b91506147b682615590565b604082019050919050565b60006147ce602c83614e6c565b91506147d9826155df565b604082019050919050565b60006147f1603a83614e6c565b91506147fc8261562e565b604082019050919050565b6000614814601783614e7d565b915061481f8261567d565b601782019050919050565b6000614837603583614e6c565b9150614842826156a6565b604082019050919050565b600061485a603e83614e6c565b9150614865826156f5565b604082019050919050565b600061487d603a83614e6c565b915061488882615744565b604082019050919050565b60006148a0601183614e7d565b91506148ab82615793565b601182019050919050565b60006148c3604c83614e6c565b91506148ce826157bc565b606082019050919050565b60006148e6602f83614e6c565b91506148f182615831565b604082019050919050565b6000614909602c83614e6c565b915061491482615880565b604082019050919050565b61492881615024565b82525050565b600061493982614807565b91506149458285614560565b915061495082614893565b915061495c8284614560565b91508190509392505050565b600060208201905061497d60008301846144eb565b92915050565b600060608201905061499860008301866144eb565b6149a560208301856144eb565b6149b2604083018461491f565b949350505050565b60006040820190506149cf60008301856144eb565b6149dc602083018461491f565b9392505050565b60006020820190506149f860008301846144fa565b92915050565b6000602082019050614a136000830184614509565b92915050565b600061014082019050614a2f600083018d614518565b614a3c602083018c6144fa565b614a49604083018b61491f565b614a56606083018a61491f565b614a6360808301896144eb565b614a7060a08301886144eb565b614a7d60c083018761491f565b614a8a60e083018661491f565b614a986101008301856144eb565b614aa661012083018461491f565b9b9a5050505050505050505050565b600060e082019050614aca600083018a614518565b614ad7602083018961491f565b614ae4604083018861491f565b614af160608301876144eb565b614afe608083018661491f565b614b0b60a08301856144eb565b614b1860c083018461491f565b98975050505050505050565b60006020820190508181036000830152614b3e8184614527565b905092915050565b60006020820190508181036000830152614b5f81614591565b9050919050565b60006020820190508181036000830152614b7f816145b4565b9050919050565b60006020820190508181036000830152614b9f816145d7565b9050919050565b60006020820190508181036000830152614bbf816145fa565b9050919050565b60006020820190508181036000830152614bdf8161461d565b9050919050565b60006020820190508181036000830152614bff81614640565b9050919050565b60006020820190508181036000830152614c1f81614663565b9050919050565b60006020820190508181036000830152614c3f81614686565b9050919050565b60006020820190508181036000830152614c5f816146a9565b9050919050565b60006020820190508181036000830152614c7f816146cc565b9050919050565b60006020820190508181036000830152614c9f816146ef565b9050919050565b60006020820190508181036000830152614cbf81614712565b9050919050565b60006020820190508181036000830152614cdf81614735565b9050919050565b60006020820190508181036000830152614cff81614758565b9050919050565b60006020820190508181036000830152614d1f8161477b565b9050919050565b60006020820190508181036000830152614d3f8161479e565b9050919050565b60006020820190508181036000830152614d5f816147c1565b9050919050565b60006020820190508181036000830152614d7f816147e4565b9050919050565b60006020820190508181036000830152614d9f8161482a565b9050919050565b60006020820190508181036000830152614dbf8161484d565b9050919050565b60006020820190508181036000830152614ddf81614870565b9050919050565b60006020820190508181036000830152614dff816148b6565b9050919050565b60006020820190508181036000830152614e1f816148d9565b9050919050565b60006020820190508181036000830152614e3f816148fc565b9050919050565b6000602082019050614e5b600083018461491f565b92915050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000614e9382615024565b9150614e9e83615024565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614ed357614ed261509d565b5b828201905092915050565b6000614ee982615024565b9150614ef483615024565b925082614f0457614f036150cc565b5b828204905092915050565b6000614f1a82615024565b9150614f2583615024565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614f5e57614f5d61509d565b5b828202905092915050565b6000614f7482615024565b9150614f7f83615024565b925082821015614f9257614f9161509d565b5b828203905092915050565b6000614fa882615004565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050614fff826158cf565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061503982614ff1565b9050919050565b60005b8381101561505e578082015181840152602081019050615043565b8381111561506d576000848401525b50505050565b600061507e82615024565b915060008214156150925761509161509d565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f2066696c6c0000000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d7573742068617665207060008201527f617573657220726f6c6520746f20706175736500000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f20626964202d20746f6f206c61746500000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f20626964000000000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206f66206b6960008201527f6e642061756374696f6e206d757374206e6f74206265206f70656e20666f722060208201527f6d6f7265207468616e2037206461797300000000000000000000000000000000604082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f66206b696e642061756374696f6e20746f2062696400000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f2066696c6c202d20746f6f206c617465000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f2066696c6c202d20746f6f206561726c790000000000602082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20617420736f6d6520706f696e740000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f68617665206e6f2062696420746f2063616e63656c0000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f2063616e63656c000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d7573742062652074686560008201527f206d616b657220746f2063616e63656c00000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206e6f6e657860008201527f697374656e740000000000000000000000000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d757374206d617463682060008201527f707269636520746f206269640000000000000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f6265206f70656e20746f20626964202d20746f6f206561726c79000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d7573742068617665207060008201527f617573657220726f6c6520746f20756e70617573650000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206f72646572206d7573742060008201527f686176652062696420746f2066696c6c2061756374696f6e206f726465720000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d757374206d617463682060008201527f707269636520746f2066696c6c20646972656374206f72646572000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d7573742062652074686560008201527f206d616b6572206f722066696e616c2062696464657220746f2066696c6c206160208201527f756374696f6e206f726465720000000000000000000000000000000000000000604082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b7f4c656d6f6e6164654d61726b6574706c6163653a206d7573742073757270617360008201527f732062696420746f206269640000000000000000000000000000000000000000602082015250565b600281106158e0576158df6150fb565b5b50565b6158ec81614f9d565b81146158f757600080fd5b50565b61590381614faf565b811461590e57600080fd5b50565b61591a81614fbb565b811461592557600080fd5b50565b61593181614fc5565b811461593c57600080fd5b50565b6002811061594c57600080fd5b50565b61595881615024565b811461596357600080fd5b5056fea264697066735822122073f492d169be3a69e858552f8b946679014e4feee0522ca555ce3bcb1d581fcc64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 325,
        "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)1516_storage)"
      },
      {
        "astId": 601,
        "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1922,
        "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
        "label": "_orders",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Order)1917_storage)"
      },
      {
        "astId": 1925,
        "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
        "label": "_orderIdTracker",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Counter)897_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(OrderKind)1848": {
        "encoding": "inplace",
        "label": "enum LemonadeMarketplace.OrderKind",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)1516_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1516_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Order)1917_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LemonadeMarketplace.Order)",
        "numberOfBytes": "32",
        "value": "t_struct(Order)1917_storage"
      },
      "t_struct(AddressSet)1516_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1515,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1215_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)897_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 896,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Order)1917_storage": {
        "encoding": "inplace",
        "label": "struct LemonadeMarketplace.Order",
        "members": [
          {
            "astId": 1892,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "kind",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(OrderKind)1848"
          },
          {
            "astId": 1894,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "open",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1896,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "openFrom",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1898,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "openTo",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1900,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "maker",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1902,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "currency",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1904,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1906,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "tokenContract",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1908,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "tokenId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1910,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "bidder",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 1912,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "bidAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 1914,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "taker",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 1916,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "paidAmount",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1215_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1210,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1214,
            "contract": "contracts/LemonadeMarketplace.sol:LemonadeMarketplace",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}