{
  "address": "0x069751D80a3b3B3948d4c511F7498C8BceD8a92e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "childChainManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "indexed": false,
          "internalType": "struct LibPart.Part[]",
          "name": "royalties",
          "type": "tuple[]"
        }
      ],
      "name": "RoyaltiesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "metaData",
          "type": "bytes"
        }
      ],
      "name": "TransferWithMetadata",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "WithdrawnBatch",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_BATCH_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenWithdrawn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "encodeState",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getRaribleV2Royalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI_",
          "type": "string"
        }
      ],
      "name": "mintToCaller",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI_",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "value",
              "type": "uint96"
            }
          ],
          "internalType": "struct LibPart.Part[]",
          "name": "royalties_",
          "type": "tuple[]"
        }
      ],
      "name": "mintToCallerWithRoyalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawWithMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x71c5827c4f9693bde1861f02bed178d0d4cb0061ada207f0cdd26aa0a7684411",
  "receipt": {
    "to": null,
    "from": "0x951292004e8a18955Cb1095CB72Ca6B01d68336E",
    "contractAddress": "0x069751D80a3b3B3948d4c511F7498C8BceD8a92e",
    "transactionIndex": 48,
    "gasUsed": "5284446",
    "logsBloom": "0x0000000400000000000000000000000000000000000100000000000000000004000000000000800000000000000000000000800000008000400000000000000000008000000000000000000000000080000000000000000000011000000000000000000002000000000000000000080000000010000000008000000000000000000000000000000000000000008000a010000000000000000000000000080000200000010000000000000000000000000000000000000000001000000000004000000000000000000001000000000000000000000000000100102000000020000000000000000000000000001000000000000400000000100000000000100000",
    "blockHash": "0x23a03308f062c8f4730cba2d1db80e4b995edb7b96c34197d23f3b1c592dba7b",
    "transactionHash": "0x71c5827c4f9693bde1861f02bed178d0d4cb0061ada207f0cdd26aa0a7684411",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 22006891,
        "transactionHash": "0x71c5827c4f9693bde1861f02bed178d0d4cb0061ada207f0cdd26aa0a7684411",
        "address": "0x069751D80a3b3B3948d4c511F7498C8BceD8a92e",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e"
        ],
        "data": "0x",
        "logIndex": 463,
        "blockHash": "0x23a03308f062c8f4730cba2d1db80e4b995edb7b96c34197d23f3b1c592dba7b"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 22006891,
        "transactionHash": "0x71c5827c4f9693bde1861f02bed178d0d4cb0061ada207f0cdd26aa0a7684411",
        "address": "0x069751D80a3b3B3948d4c511F7498C8BceD8a92e",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9",
          "0x000000000000000000000000a6fa4fb5f76172d178d61b04b0ecd319c5d1c0aa",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e"
        ],
        "data": "0x",
        "logIndex": 464,
        "blockHash": "0x23a03308f062c8f4730cba2d1db80e4b995edb7b96c34197d23f3b1c592dba7b"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 22006891,
        "transactionHash": "0x71c5827c4f9693bde1861f02bed178d0d4cb0061ada207f0cdd26aa0a7684411",
        "address": "0x069751D80a3b3B3948d4c511F7498C8BceD8a92e",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e"
        ],
        "data": "0x",
        "logIndex": 465,
        "blockHash": "0x23a03308f062c8f4730cba2d1db80e4b995edb7b96c34197d23f3b1c592dba7b"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 22006891,
        "transactionHash": "0x71c5827c4f9693bde1861f02bed178d0d4cb0061ada207f0cdd26aa0a7684411",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000951292004e8a18955cb1095cb72ca6b01d68336e",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002333944e7f128000000000000000000000000000000000000000000000000010feae35b8284460000000000000000000000000000000000000000000000023afe0533b0141110730000000000000000000000000000000000000000000000010db7aa169a931e0000000000000000000000000000000000000000000000023b00386cf4fc023873",
        "logIndex": 466,
        "blockHash": "0x23a03308f062c8f4730cba2d1db80e4b995edb7b96c34197d23f3b1c592dba7b"
      }
    ],
    "blockNumber": 22006891,
    "cumulativeGasUsed": "16635318",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Non-Fungible Lemon",
    "NFL",
    "0xA6FA4fB5f76172d178d61B04b0ecd319C5d1C0aa"
  ],
  "solcInputHash": "9493b670c8abf92caf56d659a2dfc740",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"childChainManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"indexed\":false,\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"}],\"name\":\"RoyaltiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metaData\",\"type\":\"bytes\"}],\"name\":\"TransferWithMetadata\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawnBatch\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_BATCH_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"encodeState\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getRaribleV2Royalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"}],\"name\":\"mintToCaller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"value\",\"type\":\"uint96\"}],\"internalType\":\"struct LibPart.Part[]\",\"name\":\"royalties_\",\"type\":\"tuple[]\"}],\"name\":\"mintToCallerWithRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"withdrawBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawWithMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"deposit(address,bytes)\":{\"details\":\"see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2160\"},\"encodeState(uint256)\":{\"details\":\"see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2255\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"withdraw(uint256)\":{\"details\":\"see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2191\"},\"withdrawBatch(uint256[])\":{\"details\":\"see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2202\"},\"withdrawWithMetadata(uint256)\":{\"details\":\"see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2234\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721Lemonade.sol\":\"ERC721Lemonade\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\",\"keccak256\":\"0x313834fba9dbefee1df7717a5e3063ebf567d276e67bc925a03c7f8423f4c50e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a9a31f278ee3ed0568ab7e3c09ecb72bf92f922475a274760b4c58f87f9ad0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7481c284b0ff5983d3f1784f0ceae1ec397f8c8938bc60552b19889cc057aee8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xe8f81ba5ba258c2a3ad5cf4c0bf6263c78e60f320bd0bc150c9de2445958c47b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/ERC721Lemonade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Royalties.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract ERC721Lemonade is Context, AccessControlEnumerable, ERC721Burnable, ERC721Pausable, Royalties {\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\\\"DEPOSITOR_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    uint256 public constant WITHDRAW_BATCH_LIMIT = 20;\\n\\n    Counters.Counter private _tokenIdTracker;\\n\\n    mapping (uint256 => bool) public _tokenWithdrawn;\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    event TransferWithMetadata(address indexed from, address indexed to, uint256 indexed tokenId, bytes metaData);\\n    event WithdrawnBatch(address indexed user, uint256[] tokenIds);\\n\\n    constructor(string memory name, string memory symbol, address childChainManager) ERC721(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\\n        _setupRole(PAUSER_ROLE, _msgSender());\\n    }\\n\\n    function mintToCaller(string memory tokenURI_)\\n        public\\n        virtual\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        uint256 tokenId = _tokenIdTracker.current();\\n\\n        _mint(_msgSender(), tokenId);\\n        _tokenURIs[tokenId] = tokenURI_;\\n\\n        _tokenIdTracker.increment();\\n\\n        return tokenId;\\n    }\\n\\n    function mintToCallerWithRoyalty(string memory tokenURI_, LibPart.Part[] memory royalties_)\\n        public\\n        virtual\\n        whenNotPaused\\n        returns (uint256)\\n    {\\n        uint256 tokenId = mintToCaller(tokenURI_);\\n\\n        _saveRoyalties(tokenId, royalties_);\\n\\n        return tokenId;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"ERC721Lemonade: URI query for nonexistent token\\\");\\n\\n        return _tokenURIs[tokenId];\\n    }\\n\\n    function pause()\\n        public\\n        virtual\\n        onlyRole(PAUSER_ROLE)\\n    {\\n        _pause();\\n    }\\n\\n    function unpause()\\n        public\\n        virtual\\n        onlyRole(PAUSER_ROLE)\\n    {\\n        _unpause();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlEnumerable, ERC721, Royalties)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\\n        internal\\n        virtual\\n        override(ERC721, ERC721Pausable)\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2160\\n     */\\n    function deposit(address user, bytes calldata depositData)\\n        external\\n        onlyRole(DEPOSITOR_ROLE)\\n    {\\n        if (depositData.length == 32) { // deposit single\\n            uint256 tokenId = abi.decode(depositData, (uint256));\\n\\n            _tokenWithdrawn[tokenId] = false;\\n            _mint(user, tokenId);\\n        } else { // deposit batch\\n            uint256[] memory tokenIds = abi.decode(depositData, (uint256[]));\\n            uint256 length = tokenIds.length;\\n\\n            for (uint256 i; i < length; i++) {\\n                _tokenWithdrawn[tokenIds[i]] = false;\\n                _mint(user, tokenIds[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2191\\n     */\\n    function withdraw(uint256 tokenId)\\n        external\\n    {\\n        withdrawWithMetadata(tokenId);\\n    }\\n\\n    /**\\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2202\\n     */\\n    function withdrawBatch(uint256[] calldata tokenIds)\\n        external\\n    {\\n        uint256 length = tokenIds.length;\\n        require(length <= WITHDRAW_BATCH_LIMIT, \\\"ERC721Lemonade: EXCEEDS_BATCH_LIMIT\\\");\\n\\n        for (uint256 i; i < length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n\\n            withdrawWithMetadata(tokenId);\\n        }\\n\\n        emit WithdrawnBatch(_msgSender(), tokenIds);\\n    }\\n\\n    /**\\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2234\\n     */\\n    function withdrawWithMetadata(uint256 tokenId)\\n        public\\n    {\\n        require(_msgSender() == ownerOf(tokenId), string(abi.encodePacked(\\\"ERC721Lemonade: INVALID_TOKEN_OWNER \\\", tokenId)));\\n\\n        _tokenWithdrawn[tokenId] = true;\\n\\n        emit TransferWithMetadata(ownerOf(tokenId), address(0), tokenId, this.encodeState(tokenId));\\n\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2255\\n     */\\n    function encodeState(uint256 tokenId)\\n        external\\n        view\\n        virtual\\n        returns (bytes memory)\\n    {\\n        return abi.encode(tokenURI(tokenId), royalties[tokenId]);\\n    }\\n}\\n\",\"keccak256\":\"0xef7ecc6610d670c701899e8101d4b486d2aba40bfbabff39527656367f9dd425\",\"license\":\"MIT\"},\"contracts/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royalty Standard\\n///\\ninterface IERC2981 is IERC165 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty\\n    //          is owed and to whom.\\n    /// @param _tokenId - the NFT asset queried for royalty information\\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(\\n        uint256 _tokenId,\\n        uint256 _salePrice\\n    ) external view returns (\\n        address receiver,\\n        uint256 royaltyAmount\\n    );\\n}\\n\",\"keccak256\":\"0x4abe7ea4eabf65b0e7bb547a64b57d9df104c8ac5b9c98f2932ed9f925732eea\",\"license\":\"MIT\"},\"contracts/Royalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC2981.sol\\\";\\nimport \\\"./rarible/impl/RoyaltiesV2Impl.sol\\\";\\nimport \\\"./rarible/LibPart.sol\\\";\\nimport \\\"./rarible/RoyaltiesV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract Royalties is ERC165, IERC2981, RoyaltiesV2Impl {\\n    function royaltyInfo(uint256 tokenId, uint256 price)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        LibPart.Part[] memory royalties_ = royalties[tokenId];\\n        uint256 length = royalties_.length;\\n\\n        if (length == 0) {\\n            return (address(0), 0);\\n        }\\n\\n        uint256 totalValue;\\n        for (uint256 i; i < length; i++) {\\n            totalValue += royalties_[i].value;\\n        }\\n        return (royalties_[0].account, (price * totalValue) / 10000);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC2981).interfaceId ||\\n            interfaceId == type(RoyaltiesV2).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xdf3af2d682ac0b598cf1a93e786c487ece091adc174778b6afe1f7d11709788e\",\"license\":\"MIT\"},\"contracts/rarible/LibPart.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\",\"keccak256\":\"0xf9fd0d768bdc8ca426790737f8548484573148dd5ed0365c31d98a06ecc0ed5b\",\"license\":\"MIT\"},\"contracts/rarible/RoyaltiesV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\ninterface RoyaltiesV2 {\\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\\n\\n    function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\\n}\\n\",\"keccak256\":\"0x209acdaf24082cd88ded8211468371a65de5f67713d2d888f1f048d757054d13\",\"license\":\"MIT\"},\"contracts/rarible/impl/AbstractRoyalties.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../LibPart.sol\\\";\\n\\nabstract contract AbstractRoyalties {\\n    mapping (uint256 => LibPart.Part[]) internal royalties;\\n\\n    function _saveRoyalties(uint256 id, LibPart.Part[] memory _royalties) internal {\\n        uint256 totalValue;\\n        for (uint i = 0; i < _royalties.length; i++) {\\n            require(_royalties[i].account != address(0x0), \\\"Recipient should be present\\\");\\n            require(_royalties[i].value != 0, \\\"Royalty value should be positive\\\");\\n            totalValue += _royalties[i].value;\\n            royalties[id].push(_royalties[i]);\\n        }\\n        require(totalValue < 10000, \\\"Royalty total value should be < 10000\\\");\\n        _onRoyaltiesSet(id, _royalties);\\n    }\\n\\n    function _updateAccount(uint256 _id, address _from, address _to) internal {\\n        uint length = royalties[_id].length;\\n        for(uint i = 0; i < length; i++) {\\n            if (royalties[_id][i].account == _from) {\\n                royalties[_id][i].account = payable(address(uint160(_to)));\\n            }\\n        }\\n    }\\n\\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) virtual internal;\\n}\\n\",\"keccak256\":\"0x29f08cd851612650bf405ab02592907e92c4f987a5a0cb676445b8c03d43d955\",\"license\":\"MIT\"},\"contracts/rarible/impl/RoyaltiesV2Impl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./AbstractRoyalties.sol\\\";\\nimport \\\"../RoyaltiesV2.sol\\\";\\n\\ncontract RoyaltiesV2Impl is AbstractRoyalties, RoyaltiesV2 {\\n\\n    function getRaribleV2Royalties(uint256 id) override external view returns (LibPart.Part[] memory) {\\n        return royalties[id];\\n    }\\n\\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) override internal {\\n        emit RoyaltiesSet(id, _royalties);\\n    }\\n}\\n\",\"keccak256\":\"0x92b43257774fdbcb1d2021a5a854e1a0e47a80c95c469081cb6f3fb324c31107\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200600a3803806200600a8339818101604052810190620000379190620004f7565b8282816002908051906020019062000051929190620003be565b5080600390805190602001906200006a929190620003be565b5050506000600860006101000a81548160ff021916908315150217905550620000ac6000801b620000a06200012860201b60201c565b6200013060201b60201c565b620000de7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a9826200013060201b60201c565b6200011f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a620001136200012860201b60201c565b6200013060201b60201c565b5050506200073d565b600033905090565b6200014782826200017860201b62001b5e1760201c565b6200017381600160008581526020019081526020016000206200018e60201b62001b6c1790919060201c565b505050565b6200018a8282620001c660201b60201c565b5050565b6000620001be836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620002b760201b60201c565b905092915050565b620001d882826200033160201b60201c565b620002b357600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002586200012860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620002cb83836200039b60201b60201c565b620003265782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506200032b565b600090505b92915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b828054620003cc9062000648565b90600052602060002090601f016020900481019282620003f057600085556200043c565b82601f106200040b57805160ff19168380011785556200043c565b828001600101855582156200043c579182015b828111156200043b5782518255916020019190600101906200041e565b5b5090506200044b91906200044f565b5090565b5b808211156200046a57600081600090555060010162000450565b5090565b6000620004856200047f84620005a8565b6200057f565b9050828152602081018484840111156200049e57600080fd5b620004ab84828562000612565b509392505050565b600081519050620004c48162000723565b92915050565b600082601f830112620004dc57600080fd5b8151620004ee8482602086016200046e565b91505092915050565b6000806000606084860312156200050d57600080fd5b600084015167ffffffffffffffff8111156200052857600080fd5b6200053686828701620004ca565b935050602084015167ffffffffffffffff8111156200055457600080fd5b6200056286828701620004ca565b92505060406200057586828701620004b3565b9150509250925092565b60006200058b6200059e565b90506200059982826200067e565b919050565b6000604051905090565b600067ffffffffffffffff821115620005c657620005c5620006e3565b5b620005d18262000712565b9050602081019050919050565b6000620005eb82620005f2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200063257808201518184015260208101905062000615565b8381111562000642576000848401525b50505050565b600060028204905060018216806200066157607f821691505b60208210811415620006785762000677620006b4565b5b50919050565b620006898262000712565b810181811067ffffffffffffffff82111715620006ab57620006aa620006e3565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6200072e81620005de565b81146200073a57600080fd5b50565b6158bd806200074d6000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80637624f30d11610130578063a5e584dc116100b8578063cf2c52cb1161007c578063cf2c52cb146106d4578063d547741f146106f0578063db65b45f1461070c578063e63ab1e91461073c578063e985e9c51461075a57610232565b8063a5e584dc1461060c578063b88d4fde14610628578063c87b56dd14610644578063ca15c87314610674578063cad96cca146106a457610232565b806395d89b41116100ff57806395d89b411461057a5780639c8d415614610598578063a217fddf146105b4578063a22cb465146105d2578063a3b0b5a3146105ee57610232565b80637624f30d146104e05780638456cb59146105105780639010d07c1461051a57806391d148541461054a57610232565b80632f2ff15d116101be5780634eff851d116101825780634eff851d1461041457806358b4c6bb146104325780635c975abb146104625780636352211e1461048057806370a08231146104b057610232565b80632f2ff15d1461039a57806336568abe146103b65780633f4ba83a146103d257806342842e0e146103dc57806342966c68146103f857610232565b8063111fb47b11610205578063111fb47b146102d157806323b872dd14610301578063248a9ca31461031d5780632a55205a1461034d5780632e1a7d4d1461037e57610232565b806301ffc9a71461023757806306fdde0314610267578063081812fc14610285578063095ea7b3146102b5575b600080fd5b610251600480360381019061024c9190613df4565b61078a565b60405161025e9190614746565b60405180910390f35b61026f61079c565b60405161027c919061479e565b60405180910390f35b61029f600480360381019061029a9190613f34565b61082e565b6040516102ac9190614670565b60405180910390f35b6102cf60048036038101906102ca9190613c91565b6108b3565b005b6102eb60048036038101906102e69190613e87565b6109cb565b6040516102f89190614af7565b60405180910390f35b61031b60048036038101906103169190613b33565b610a6f565b005b61033760048036038101906103329190613d53565b610acf565b6040516103449190614761565b60405180910390f35b61036760048036038101906103629190613f5d565b610aee565b6040516103759291906146d7565b60405180910390f35b61039860048036038101906103939190613f34565b610cf9565b005b6103b460048036038101906103af9190613d7c565b610d05565b005b6103d060048036038101906103cb9190613d7c565b610d39565b005b6103da610d6d565b005b6103f660048036038101906103f19190613b33565b610daa565b005b610412600480360381019061040d9190613f34565b610dca565b005b61041c610e26565b6040516104299190614af7565b60405180910390f35b61044c60048036038101906104479190613ec8565b610e2b565b6040516104599190614af7565b60405180910390f35b61046a610e96565b6040516104779190614746565b60405180910390f35b61049a60048036038101906104959190613f34565b610ead565b6040516104a79190614670565b60405180910390f35b6104ca60048036038101906104c59190613ace565b610f5f565b6040516104d79190614af7565b60405180910390f35b6104fa60048036038101906104f59190613f34565b611017565b6040516105079190614746565b60405180910390f35b610518611037565b005b610534600480360381019061052f9190613db8565b611074565b6040516105419190614670565b60405180910390f35b610564600480360381019061055f9190613d7c565b6110a3565b6040516105719190614746565b60405180910390f35b61058261110d565b60405161058f919061479e565b60405180910390f35b6105b260048036038101906105ad9190613ccd565b61119f565b005b6105bc6112b4565b6040516105c99190614761565b60405180910390f35b6105ec60048036038101906105e79190613bfd565b6112bb565b005b6105f661143c565b6040516106039190614761565b60405180910390f35b61062660048036038101906106219190613f34565b611460565b005b610642600480360381019061063d9190613b82565b611634565b005b61065e60048036038101906106599190613f34565b611696565b60405161066b919061479e565b60405180910390f35b61068e60048036038101906106899190613d53565b611783565b60405161069b9190614af7565b60405180910390f35b6106be60048036038101906106b99190613f34565b6117a7565b6040516106cb9190614700565b60405180910390f35b6106ee60048036038101906106e99190613c39565b6118a9565b005b61070a60048036038101906107059190613d7c565b611a2d565b005b61072660048036038101906107219190613f34565b611a61565b604051610733919061477c565b60405180910390f35b610744611aa6565b6040516107519190614761565b60405180910390f35b610774600480360381019061076f9190613af7565b611aca565b6040516107819190614746565b60405180910390f35b600061079582611b9c565b9050919050565b6060600280546107ab90614f3c565b80601f01602080910402602001604051908101604052809291908181526020018280546107d790614f3c565b80156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b5050505050905090565b600061083982611c7e565b610878576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086f906149f7565b60405180910390fd5b6006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108be82610ead565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561092f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092690614a37565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661094e611cea565b73ffffffffffffffffffffffffffffffffffffffff16148061097d575061097c81610977611cea565b611aca565b5b6109bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b390614977565b60405180910390fd5b6109c68383611cf2565b505050565b60006109d5610e96565b15610a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0c90614957565b60405180910390fd5b6000610a21600a611dab565b9050610a34610a2e611cea565b82611db9565b82600c60008381526020019081526020016000209080519060200190610a5b92919061363f565b50610a66600a611f87565b80915050919050565b610a80610a7a611cea565b82611f9d565b610abf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab690614a57565b60405180910390fd5b610aca83838361207b565b505050565b6000806000838152602001908152602001600020600101549050919050565b600080600060096000868152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610be8578382906000526020600020016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505081526020019060010190610b26565b5050505090506000815190506000811415610c0b57600080935093505050610cf2565b6000805b82811015610c8a57838181518110610c50577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001516bffffffffffffffffffffffff1682610c759190614cdb565b91508080610c8290614fd3565b915050610c0f565b5082600081518110610cc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600001516127108288610ce09190614d62565b610cea9190614d31565b945094505050505b9250929050565b610d0281611460565b50565b610d0f82826122d7565b610d348160016000858152602001908152602001600020611b6c90919063ffffffff16565b505050565b610d438282612300565b610d68816001600085815260200190815260200160002061238390919063ffffffff16565b505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610d9f81610d9a611cea565b6123b3565b610da7612450565b50565b610dc583838360405180602001604052806000815250611634565b505050565b610ddb610dd5611cea565b82611f9d565b610e1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1190614ab7565b60405180910390fd5b610e23816124f2565b50565b601481565b6000610e35610e96565b15610e75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6c90614957565b60405180910390fd5b6000610e80846109cb565b9050610e8c8184612603565b8091505092915050565b6000600860009054906101000a900460ff16905090565b6000806004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4d906149b7565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc790614997565b60405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600b6020528060005260406000206000915054906101000a900460ff1681565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61106981611064611cea565b6123b3565b61107161291e565b50565b600061109b82600160008681526020019081526020016000206129c190919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606003805461111c90614f3c565b80601f016020809104026020016040519081016040528092919081815260200182805461114890614f3c565b80156111955780601f1061116a57610100808354040283529160200191611195565b820191906000526020600020905b81548152906001019060200180831161117857829003601f168201915b5050505050905090565b600082829050905060148111156111eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e290614857565b60405180910390fd5b60005b81811015611257576000848483818110611231577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135905061124381611460565b50808061124f90614fd3565b9150506111ee565b50611260611cea565b73ffffffffffffffffffffffffffffffffffffffff167ff871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df84846040516112a7929190614722565b60405180910390a2505050565b6000801b81565b6112c3611cea565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611331576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611328906148d7565b60405180910390fd5b806007600061133e611cea565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166113eb611cea565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114309190614746565b60405180910390a35050565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b61146981610ead565b73ffffffffffffffffffffffffffffffffffffffff16611487611cea565b73ffffffffffffffffffffffffffffffffffffffff1614816040516020016114af9190614610565b604051602081830303815290604052906114ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f6919061479e565b60405180910390fd5b506001600b600083815260200190815260200160002060006101000a81548160ff02191690831515021790555080600073ffffffffffffffffffffffffffffffffffffffff1661154e83610ead565b73ffffffffffffffffffffffffffffffffffffffff167ff94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a143073ffffffffffffffffffffffffffffffffffffffff1663db65b45f866040518263ffffffff1660e01b81526004016115be9190614af7565b60006040518083038186803b1580156115d657600080fd5b505afa1580156115ea573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906116139190613e46565b604051611620919061477c565b60405180910390a4611631816124f2565b50565b61164561163f611cea565b83611f9d565b611684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167b90614a57565b60405180910390fd5b611690848484846129db565b50505050565b60606116a182611c7e565b6116e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d7906148f7565b60405180910390fd5b600c600083815260200190815260200160002080546116fe90614f3c565b80601f016020809104026020016040519081016040528092919081815260200182805461172a90614f3c565b80156117775780601f1061174c57610100808354040283529160200191611777565b820191906000526020600020905b81548152906001019060200180831161175a57829003601f168201915b50505050509050919050565b60006117a060016000848152602001908152602001600020612a37565b9050919050565b606060096000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561189e578382906000526020600020016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681525050815260200190600101906117dc565b505050509050919050565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a96118db816118d6611cea565b6123b3565b602083839050141561193657600083838101906118f89190613f34565b90506000600b600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506119308582611db9565b50611a27565b600083838101906119479190613d12565b905060008151905060005b81811015611a23576000600b6000858481518110611999577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff021916908315150217905550611a1087848381518110611a03577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611db9565b8080611a1b90614fd3565b915050611952565b5050505b50505050565b611a378282612a4c565b611a5c816001600085815260200190815260200160002061238390919063ffffffff16565b505050565b6060611a6c82611696565b60096000848152602001908152602001600020604051602001611a909291906147c0565b6040516020818303038152906040529050919050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611b688282612a75565b5050565b6000611b94836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612b55565b905092915050565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611c6757507fcad96cca000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611c775750611c7682612bc5565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d6583610ead565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e20906149d7565b60405180910390fd5b611e3281611c7e565b15611e72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6990614897565b60405180910390fd5b611e7e60008383612ca7565b6001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ece9190614cdb565b92505081905550816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6001816000016000828254019250508190555050565b6000611fa882611c7e565b611fe7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fde90614917565b60405180910390fd5b6000611ff283610ead565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061206157508373ffffffffffffffffffffffffffffffffffffffff166120498461082e565b73ffffffffffffffffffffffffffffffffffffffff16145b8061207257506120718185611aca565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661209b82610ead565b73ffffffffffffffffffffffffffffffffffffffff16146120f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e890614a17565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612161576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612158906148b7565b60405180910390fd5b61216c838383612ca7565b612177600082611cf2565b6001600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121c79190614dbc565b925050819055506001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461221e9190614cdb565b92505081905550816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6122e082610acf565b6122f1816122ec611cea565b6123b3565b6122fb8383612a75565b505050565b612308611cea565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236c90614ad7565b60405180910390fd5b61237f8282612cb7565b5050565b60006123ab836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612d98565b905092915050565b6123bd82826110a3565b61244c576123e28173ffffffffffffffffffffffffffffffffffffffff166014612f1e565b6123f08360001c6020612f1e565b604051602001612401929190614636565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612443919061479e565b60405180910390fd5b5050565b612458610e96565b612497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248e90614837565b60405180910390fd5b6000600860006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6124db611cea565b6040516124e89190614670565b60405180910390a1565b60006124fd82610ead565b905061250b81600084612ca7565b612516600083611cf2565b6001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125669190614dbc565b925050819055506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080600090505b82518110156128ca57600073ffffffffffffffffffffffffffffffffffffffff16838281518110612665577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614156126c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126bf90614a97565b60405180910390fd5b6000838281518110612703577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001516bffffffffffffffffffffffff16141561275e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275590614937565b60405180910390fd5b828181518110612797577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001516bffffffffffffffffffffffff16826127bc9190614cdb565b91506009600085815260200190815260200160002083828151811061280a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505080806128c290614fd3565b91505061260b565b50612710811061290f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290690614a77565b60405180910390fd5b6129198383613218565b505050565b612926610e96565b15612966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295d90614957565b60405180910390fd5b6001600860006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129aa611cea565b6040516129b79190614670565b60405180910390a1565b60006129d08360000183613255565b60001c905092915050565b6129e684848461207b565b6129f2848484846132a6565b612a31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a2890614877565b60405180910390fd5b50505050565b6000612a458260000161343d565b9050919050565b612a5582610acf565b612a6681612a61611cea565b6123b3565b612a708383612cb7565b505050565b612a7f82826110a3565b612b5157600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612af6611cea565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000612b61838361344e565b612bba578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612bbf565b600090505b92915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612c9057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612ca05750612c9f82613471565b5b9050919050565b612cb28383836134eb565b505050565b612cc182826110a3565b15612d9457600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d39611cea565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008083600101600084815260200190815260200160002054905060008114612f12576000600182612dca9190614dbc565b9050600060018660000180549050612de29190614dbc565b9050818114612e9d576000866000018281548110612e29577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110612e73577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612ed7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612f18565b60009150505b92915050565b606060006002836002612f319190614d62565b612f3b9190614cdb565b67ffffffffffffffff811115612f7a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612fac5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061300a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613094577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026130d49190614d62565b6130de9190614cdb565b90505b60018111156131ca577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613146577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110613183577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806131c390614f12565b90506130e1565b506000841461320e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613205906147f7565b60405180910390fd5b8091505092915050565b7f3fa96d7b6bcbfe71ef171666d84db3cf52fa2d1c8afdb1cc8e486177f208b7df8282604051613249929190614b12565b60405180910390a15050565b6000826000018281548110613293577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b60006132c78473ffffffffffffffffffffffffffffffffffffffff16613543565b15613430578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026132f0611cea565b8786866040518563ffffffff1660e01b8152600401613312949392919061468b565b602060405180830381600087803b15801561332c57600080fd5b505af192505050801561335d57506040513d601f19601f8201168201806040525081019061335a9190613e1d565b60015b6133e0573d806000811461338d576040519150601f19603f3d011682016040523d82523d6000602084013e613392565b606091505b506000815114156133d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133cf90614877565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613435565b600190505b949350505050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806134e457506134e382613556565b5b9050919050565b6134f68383836135d0565b6134fe610e96565b1561353e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161353590614817565b60405180910390fd5b505050565b600080823b905060008111915050919050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806135c957506135c8826135d5565b5b9050919050565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b82805461364b90614f3c565b90600052602060002090601f01602090048101928261366d57600085556136b4565b82601f1061368657805160ff19168380011785556136b4565b828001600101855582156136b4579182015b828111156136b3578251825591602001919060010190613698565b5b5090506136c191906136c5565b5090565b5b808211156136de5760008160009055506001016136c6565b5090565b60006136f56136f084614b67565b614b42565b9050808382526020820190508285604086028201111561371457600080fd5b60005b85811015613744578161372a8882613a58565b845260208401935060408301925050600181019050613717565b5050509392505050565b600061376161375c84614b93565b614b42565b9050808382526020820190508285602086028201111561378057600080fd5b60005b858110156137b057816137968882613aa4565b845260208401935060208301925050600181019050613783565b5050509392505050565b60006137cd6137c884614bbf565b614b42565b9050828152602081018484840111156137e557600080fd5b6137f0848285614ed0565b509392505050565b600061380b61380684614bbf565b614b42565b90508281526020810184848401111561382357600080fd5b61382e848285614edf565b509392505050565b600061384961384484614bf0565b614b42565b90508281526020810184848401111561386157600080fd5b61386c848285614ed0565b509392505050565b600081359050613883816157e6565b92915050565b600081359050613898816157fd565b92915050565b600082601f8301126138af57600080fd5b81356138bf8482602086016136e2565b91505092915050565b60008083601f8401126138da57600080fd5b8235905067ffffffffffffffff8111156138f357600080fd5b60208301915083602082028301111561390b57600080fd5b9250929050565b600082601f83011261392357600080fd5b813561393384826020860161374e565b91505092915050565b60008135905061394b81615814565b92915050565b6000813590506139608161582b565b92915050565b60008135905061397581615842565b92915050565b60008151905061398a81615842565b92915050565b60008083601f8401126139a257600080fd5b8235905067ffffffffffffffff8111156139bb57600080fd5b6020830191508360018202830111156139d357600080fd5b9250929050565b600082601f8301126139eb57600080fd5b81356139fb8482602086016137ba565b91505092915050565b600082601f830112613a1557600080fd5b8151613a258482602086016137f8565b91505092915050565b600082601f830112613a3f57600080fd5b8135613a4f848260208601613836565b91505092915050565b600060408284031215613a6a57600080fd5b613a746040614b42565b90506000613a8484828501613889565b6000830152506020613a9884828501613ab9565b60208301525092915050565b600081359050613ab381615859565b92915050565b600081359050613ac881615870565b92915050565b600060208284031215613ae057600080fd5b6000613aee84828501613874565b91505092915050565b60008060408385031215613b0a57600080fd5b6000613b1885828601613874565b9250506020613b2985828601613874565b9150509250929050565b600080600060608486031215613b4857600080fd5b6000613b5686828701613874565b9350506020613b6786828701613874565b9250506040613b7886828701613aa4565b9150509250925092565b60008060008060808587031215613b9857600080fd5b6000613ba687828801613874565b9450506020613bb787828801613874565b9350506040613bc887828801613aa4565b925050606085013567ffffffffffffffff811115613be557600080fd5b613bf1878288016139da565b91505092959194509250565b60008060408385031215613c1057600080fd5b6000613c1e85828601613874565b9250506020613c2f8582860161393c565b9150509250929050565b600080600060408486031215613c4e57600080fd5b6000613c5c86828701613874565b935050602084013567ffffffffffffffff811115613c7957600080fd5b613c8586828701613990565b92509250509250925092565b60008060408385031215613ca457600080fd5b6000613cb285828601613874565b9250506020613cc385828601613aa4565b9150509250929050565b60008060208385031215613ce057600080fd5b600083013567ffffffffffffffff811115613cfa57600080fd5b613d06858286016138c8565b92509250509250929050565b600060208284031215613d2457600080fd5b600082013567ffffffffffffffff811115613d3e57600080fd5b613d4a84828501613912565b91505092915050565b600060208284031215613d6557600080fd5b6000613d7384828501613951565b91505092915050565b60008060408385031215613d8f57600080fd5b6000613d9d85828601613951565b9250506020613dae85828601613874565b9150509250929050565b60008060408385031215613dcb57600080fd5b6000613dd985828601613951565b9250506020613dea85828601613aa4565b9150509250929050565b600060208284031215613e0657600080fd5b6000613e1484828501613966565b91505092915050565b600060208284031215613e2f57600080fd5b6000613e3d8482850161397b565b91505092915050565b600060208284031215613e5857600080fd5b600082015167ffffffffffffffff811115613e7257600080fd5b613e7e84828501613a04565b91505092915050565b600060208284031215613e9957600080fd5b600082013567ffffffffffffffff811115613eb357600080fd5b613ebf84828501613a2e565b91505092915050565b60008060408385031215613edb57600080fd5b600083013567ffffffffffffffff811115613ef557600080fd5b613f0185828601613a2e565b925050602083013567ffffffffffffffff811115613f1e57600080fd5b613f2a8582860161389e565b9150509250929050565b600060208284031215613f4657600080fd5b6000613f5484828501613aa4565b91505092915050565b60008060408385031215613f7057600080fd5b6000613f7e85828601613aa4565b9250506020613f8f85828601613aa4565b9150509250929050565b6000613fa5838361456c565b60408301905092915050565b6000613fbd838361459b565b60408301905092915050565b613fd281614e3a565b82525050565b613fe181614e28565b82525050565b6000613ff282614c46565b613ffc8185614c8c565b935061400783614c21565b8060005b8381101561403857815161401f8882613f99565b975061402a83614c72565b92505060018101905061400b565b5085935050505092915050565b600061405082614c51565b61405a8185614c8c565b935061406583614c31565b8060005b83811015614095578161407c8882613fb1565b975061408783614c7f565b925050600181019050614069565b5085935050505092915050565b60006140ae8385614c9d565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156140dd57600080fd5b6020830292506140ee838584614ed0565b82840190509392505050565b61410381614e4c565b82525050565b61411281614e58565b82525050565b600061412382614c5c565b61412d8185614cae565b935061413d818560208601614edf565b614146816150e2565b840191505092915050565b600061415c82614c67565b6141668185614cbf565b9350614176818560208601614edf565b61417f816150e2565b840191505092915050565b600061419582614c67565b61419f8185614cd0565b93506141af818560208601614edf565b80840191505092915050565b60006141c8602083614cbf565b91506141d38261510d565b602082019050919050565b60006141eb602b83614cbf565b91506141f682615136565b604082019050919050565b600061420e601483614cbf565b915061421982615185565b602082019050919050565b6000614231602383614cbf565b915061423c826151ae565b604082019050919050565b6000614254603283614cbf565b915061425f826151fd565b604082019050919050565b6000614277601c83614cbf565b91506142828261524c565b602082019050919050565b600061429a602483614cbf565b91506142a582615275565b604082019050919050565b60006142bd601983614cbf565b91506142c8826152c4565b602082019050919050565b60006142e0602f83614cbf565b91506142eb826152ed565b604082019050919050565b6000614303602c83614cbf565b915061430e8261533c565b604082019050919050565b6000614326602083614cbf565b91506143318261538b565b602082019050919050565b6000614349601083614cbf565b9150614354826153b4565b602082019050919050565b600061436c603883614cbf565b9150614377826153dd565b604082019050919050565b600061438f602a83614cbf565b915061439a8261542c565b604082019050919050565b60006143b2602983614cbf565b91506143bd8261547b565b604082019050919050565b60006143d5602083614cbf565b91506143e0826154ca565b602082019050919050565b60006143f8602c83614cbf565b9150614403826154f3565b604082019050919050565b600061441b602983614cbf565b915061442682615542565b604082019050919050565b600061443e602483614cd0565b915061444982615591565b602482019050919050565b6000614461602183614cbf565b915061446c826155e0565b604082019050919050565b6000614484603183614cbf565b915061448f8261562f565b604082019050919050565b60006144a7602583614cbf565b91506144b28261567e565b604082019050919050565b60006144ca601783614cd0565b91506144d5826156cd565b601782019050919050565b60006144ed601b83614cbf565b91506144f8826156f6565b602082019050919050565b6000614510603083614cbf565b915061451b8261571f565b604082019050919050565b6000614533601183614cd0565b915061453e8261576e565b601182019050919050565b6000614556602f83614cbf565b915061456182615797565b604082019050919050565b6040820160008201516145826000850182613fc9565b5060208201516145956020850182614601565b50505050565b6040820160008083015490506145b081614f6e565b6145bd6000860182613fc9565b506145c781614f88565b6145d46020860182614601565b5050505050565b6145e481614eae565b82525050565b6145fb6145f682614eae565b61501c565b82525050565b61460a81614eb8565b82525050565b600061461b82614431565b915061462782846145ea565b60208201915081905092915050565b6000614641826144bd565b915061464d828561418a565b915061465882614526565b9150614664828461418a565b91508190509392505050565b60006020820190506146856000830184613fd8565b92915050565b60006080820190506146a06000830187613fd8565b6146ad6020830186613fd8565b6146ba60408301856145db565b81810360608301526146cc8184614118565b905095945050505050565b60006040820190506146ec6000830185613fd8565b6146f960208301846145db565b9392505050565b6000602082019050818103600083015261471a8184613fe7565b905092915050565b6000602082019050818103600083015261473d8184866140a2565b90509392505050565b600060208201905061475b60008301846140fa565b92915050565b60006020820190506147766000830184614109565b92915050565b600060208201905081810360008301526147968184614118565b905092915050565b600060208201905081810360008301526147b88184614151565b905092915050565b600060408201905081810360008301526147da8185614151565b905081810360208301526147ee8184614045565b90509392505050565b60006020820190508181036000830152614810816141bb565b9050919050565b60006020820190508181036000830152614830816141de565b9050919050565b6000602082019050818103600083015261485081614201565b9050919050565b6000602082019050818103600083015261487081614224565b9050919050565b6000602082019050818103600083015261489081614247565b9050919050565b600060208201905081810360008301526148b08161426a565b9050919050565b600060208201905081810360008301526148d08161428d565b9050919050565b600060208201905081810360008301526148f0816142b0565b9050919050565b60006020820190508181036000830152614910816142d3565b9050919050565b60006020820190508181036000830152614930816142f6565b9050919050565b6000602082019050818103600083015261495081614319565b9050919050565b600060208201905081810360008301526149708161433c565b9050919050565b600060208201905081810360008301526149908161435f565b9050919050565b600060208201905081810360008301526149b081614382565b9050919050565b600060208201905081810360008301526149d0816143a5565b9050919050565b600060208201905081810360008301526149f0816143c8565b9050919050565b60006020820190508181036000830152614a10816143eb565b9050919050565b60006020820190508181036000830152614a308161440e565b9050919050565b60006020820190508181036000830152614a5081614454565b9050919050565b60006020820190508181036000830152614a7081614477565b9050919050565b60006020820190508181036000830152614a908161449a565b9050919050565b60006020820190508181036000830152614ab0816144e0565b9050919050565b60006020820190508181036000830152614ad081614503565b9050919050565b60006020820190508181036000830152614af081614549565b9050919050565b6000602082019050614b0c60008301846145db565b92915050565b6000604082019050614b2760008301856145db565b8181036020830152614b398184613fe7565b90509392505050565b6000614b4c614b5d565b9050614b588282614fa2565b919050565b6000604051905090565b600067ffffffffffffffff821115614b8257614b816150b3565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614bae57614bad6150b3565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614bda57614bd96150b3565b5b614be3826150e2565b9050602081019050919050565b600067ffffffffffffffff821115614c0b57614c0a6150b3565b5b614c14826150e2565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614ce682614eae565b9150614cf183614eae565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614d2657614d25615026565b5b828201905092915050565b6000614d3c82614eae565b9150614d4783614eae565b925082614d5757614d56615055565b5b828204905092915050565b6000614d6d82614eae565b9150614d7883614eae565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614db157614db0615026565b5b828202905092915050565b6000614dc782614eae565b9150614dd283614eae565b925082821015614de557614de4615026565b5b828203905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b6000614e3382614e8e565b9050919050565b6000614e4582614e8e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015614efd578082015181840152602081019050614ee2565b83811115614f0c576000848401525b50505050565b6000614f1d82614eae565b91506000821415614f3157614f30615026565b5b600182039050919050565b60006002820490506001821680614f5457607f821691505b60208210811415614f6857614f67615084565b5b50919050565b6000614f81614f7c836150f3565b614df0565b9050919050565b6000614f9b614f9683615100565b614e10565b9050919050565b614fab826150e2565b810181811067ffffffffffffffff82111715614fca57614fc96150b3565b5b80604052505050565b6000614fde82614eae565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561501157615010615026565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b60008160a01c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4552433732315061757361626c653a20746f6b656e207472616e73666572207760008201527f68696c6520706175736564000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4552433732314c656d6f6e6164653a20455843454544535f42415443485f4c4960008201527f4d49540000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732314c656d6f6e6164653a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f526f79616c74792076616c75652073686f756c6420626520706f736974697665600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314c656d6f6e6164653a20494e56414c49445f544f4b454e5f4f5760008201527f4e45522000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f526f79616c747920746f74616c2076616c75652073686f756c64206265203c2060008201527f3130303030000000000000000000000000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f526563697069656e742073686f756c642062652070726573656e740000000000600082015250565b7f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6157ef81614e28565b81146157fa57600080fd5b50565b61580681614e3a565b811461581157600080fd5b50565b61581d81614e4c565b811461582857600080fd5b50565b61583481614e58565b811461583f57600080fd5b50565b61584b81614e62565b811461585657600080fd5b50565b61586281614eae565b811461586d57600080fd5b50565b61587981614eb8565b811461588457600080fd5b5056fea264697066735822122056b3fa7eab075b33afaa546e2e97129fc9c4d145307e1d5df8d9cb808c3d4a5464736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c80637624f30d11610130578063a5e584dc116100b8578063cf2c52cb1161007c578063cf2c52cb146106d4578063d547741f146106f0578063db65b45f1461070c578063e63ab1e91461073c578063e985e9c51461075a57610232565b8063a5e584dc1461060c578063b88d4fde14610628578063c87b56dd14610644578063ca15c87314610674578063cad96cca146106a457610232565b806395d89b41116100ff57806395d89b411461057a5780639c8d415614610598578063a217fddf146105b4578063a22cb465146105d2578063a3b0b5a3146105ee57610232565b80637624f30d146104e05780638456cb59146105105780639010d07c1461051a57806391d148541461054a57610232565b80632f2ff15d116101be5780634eff851d116101825780634eff851d1461041457806358b4c6bb146104325780635c975abb146104625780636352211e1461048057806370a08231146104b057610232565b80632f2ff15d1461039a57806336568abe146103b65780633f4ba83a146103d257806342842e0e146103dc57806342966c68146103f857610232565b8063111fb47b11610205578063111fb47b146102d157806323b872dd14610301578063248a9ca31461031d5780632a55205a1461034d5780632e1a7d4d1461037e57610232565b806301ffc9a71461023757806306fdde0314610267578063081812fc14610285578063095ea7b3146102b5575b600080fd5b610251600480360381019061024c9190613df4565b61078a565b60405161025e9190614746565b60405180910390f35b61026f61079c565b60405161027c919061479e565b60405180910390f35b61029f600480360381019061029a9190613f34565b61082e565b6040516102ac9190614670565b60405180910390f35b6102cf60048036038101906102ca9190613c91565b6108b3565b005b6102eb60048036038101906102e69190613e87565b6109cb565b6040516102f89190614af7565b60405180910390f35b61031b60048036038101906103169190613b33565b610a6f565b005b61033760048036038101906103329190613d53565b610acf565b6040516103449190614761565b60405180910390f35b61036760048036038101906103629190613f5d565b610aee565b6040516103759291906146d7565b60405180910390f35b61039860048036038101906103939190613f34565b610cf9565b005b6103b460048036038101906103af9190613d7c565b610d05565b005b6103d060048036038101906103cb9190613d7c565b610d39565b005b6103da610d6d565b005b6103f660048036038101906103f19190613b33565b610daa565b005b610412600480360381019061040d9190613f34565b610dca565b005b61041c610e26565b6040516104299190614af7565b60405180910390f35b61044c60048036038101906104479190613ec8565b610e2b565b6040516104599190614af7565b60405180910390f35b61046a610e96565b6040516104779190614746565b60405180910390f35b61049a60048036038101906104959190613f34565b610ead565b6040516104a79190614670565b60405180910390f35b6104ca60048036038101906104c59190613ace565b610f5f565b6040516104d79190614af7565b60405180910390f35b6104fa60048036038101906104f59190613f34565b611017565b6040516105079190614746565b60405180910390f35b610518611037565b005b610534600480360381019061052f9190613db8565b611074565b6040516105419190614670565b60405180910390f35b610564600480360381019061055f9190613d7c565b6110a3565b6040516105719190614746565b60405180910390f35b61058261110d565b60405161058f919061479e565b60405180910390f35b6105b260048036038101906105ad9190613ccd565b61119f565b005b6105bc6112b4565b6040516105c99190614761565b60405180910390f35b6105ec60048036038101906105e79190613bfd565b6112bb565b005b6105f661143c565b6040516106039190614761565b60405180910390f35b61062660048036038101906106219190613f34565b611460565b005b610642600480360381019061063d9190613b82565b611634565b005b61065e60048036038101906106599190613f34565b611696565b60405161066b919061479e565b60405180910390f35b61068e60048036038101906106899190613d53565b611783565b60405161069b9190614af7565b60405180910390f35b6106be60048036038101906106b99190613f34565b6117a7565b6040516106cb9190614700565b60405180910390f35b6106ee60048036038101906106e99190613c39565b6118a9565b005b61070a60048036038101906107059190613d7c565b611a2d565b005b61072660048036038101906107219190613f34565b611a61565b604051610733919061477c565b60405180910390f35b610744611aa6565b6040516107519190614761565b60405180910390f35b610774600480360381019061076f9190613af7565b611aca565b6040516107819190614746565b60405180910390f35b600061079582611b9c565b9050919050565b6060600280546107ab90614f3c565b80601f01602080910402602001604051908101604052809291908181526020018280546107d790614f3c565b80156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b5050505050905090565b600061083982611c7e565b610878576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086f906149f7565b60405180910390fd5b6006600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108be82610ead565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561092f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092690614a37565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661094e611cea565b73ffffffffffffffffffffffffffffffffffffffff16148061097d575061097c81610977611cea565b611aca565b5b6109bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b390614977565b60405180910390fd5b6109c68383611cf2565b505050565b60006109d5610e96565b15610a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0c90614957565b60405180910390fd5b6000610a21600a611dab565b9050610a34610a2e611cea565b82611db9565b82600c60008381526020019081526020016000209080519060200190610a5b92919061363f565b50610a66600a611f87565b80915050919050565b610a80610a7a611cea565b82611f9d565b610abf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab690614a57565b60405180910390fd5b610aca83838361207b565b505050565b6000806000838152602001908152602001600020600101549050919050565b600080600060096000868152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015610be8578382906000526020600020016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505081526020019060010190610b26565b5050505090506000815190506000811415610c0b57600080935093505050610cf2565b6000805b82811015610c8a57838181518110610c50577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001516bffffffffffffffffffffffff1682610c759190614cdb565b91508080610c8290614fd3565b915050610c0f565b5082600081518110610cc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600001516127108288610ce09190614d62565b610cea9190614d31565b945094505050505b9250929050565b610d0281611460565b50565b610d0f82826122d7565b610d348160016000858152602001908152602001600020611b6c90919063ffffffff16565b505050565b610d438282612300565b610d68816001600085815260200190815260200160002061238390919063ffffffff16565b505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610d9f81610d9a611cea565b6123b3565b610da7612450565b50565b610dc583838360405180602001604052806000815250611634565b505050565b610ddb610dd5611cea565b82611f9d565b610e1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1190614ab7565b60405180910390fd5b610e23816124f2565b50565b601481565b6000610e35610e96565b15610e75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6c90614957565b60405180910390fd5b6000610e80846109cb565b9050610e8c8184612603565b8091505092915050565b6000600860009054906101000a900460ff16905090565b6000806004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4d906149b7565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc790614997565b60405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600b6020528060005260406000206000915054906101000a900460ff1681565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61106981611064611cea565b6123b3565b61107161291e565b50565b600061109b82600160008681526020019081526020016000206129c190919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606003805461111c90614f3c565b80601f016020809104026020016040519081016040528092919081815260200182805461114890614f3c565b80156111955780601f1061116a57610100808354040283529160200191611195565b820191906000526020600020905b81548152906001019060200180831161117857829003601f168201915b5050505050905090565b600082829050905060148111156111eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e290614857565b60405180910390fd5b60005b81811015611257576000848483818110611231577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135905061124381611460565b50808061124f90614fd3565b9150506111ee565b50611260611cea565b73ffffffffffffffffffffffffffffffffffffffff167ff871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df84846040516112a7929190614722565b60405180910390a2505050565b6000801b81565b6112c3611cea565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611331576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611328906148d7565b60405180910390fd5b806007600061133e611cea565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166113eb611cea565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114309190614746565b60405180910390a35050565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a981565b61146981610ead565b73ffffffffffffffffffffffffffffffffffffffff16611487611cea565b73ffffffffffffffffffffffffffffffffffffffff1614816040516020016114af9190614610565b604051602081830303815290604052906114ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f6919061479e565b60405180910390fd5b506001600b600083815260200190815260200160002060006101000a81548160ff02191690831515021790555080600073ffffffffffffffffffffffffffffffffffffffff1661154e83610ead565b73ffffffffffffffffffffffffffffffffffffffff167ff94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a143073ffffffffffffffffffffffffffffffffffffffff1663db65b45f866040518263ffffffff1660e01b81526004016115be9190614af7565b60006040518083038186803b1580156115d657600080fd5b505afa1580156115ea573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906116139190613e46565b604051611620919061477c565b60405180910390a4611631816124f2565b50565b61164561163f611cea565b83611f9d565b611684576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167b90614a57565b60405180910390fd5b611690848484846129db565b50505050565b60606116a182611c7e565b6116e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d7906148f7565b60405180910390fd5b600c600083815260200190815260200160002080546116fe90614f3c565b80601f016020809104026020016040519081016040528092919081815260200182805461172a90614f3c565b80156117775780601f1061174c57610100808354040283529160200191611777565b820191906000526020600020905b81548152906001019060200180831161175a57829003601f168201915b50505050509050919050565b60006117a060016000848152602001908152602001600020612a37565b9050919050565b606060096000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561189e578382906000526020600020016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681525050815260200190600101906117dc565b505050509050919050565b7f8f4f2da22e8ac8f11e15f9fc141cddbb5deea8800186560abb6e68c5496619a96118db816118d6611cea565b6123b3565b602083839050141561193657600083838101906118f89190613f34565b90506000600b600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506119308582611db9565b50611a27565b600083838101906119479190613d12565b905060008151905060005b81811015611a23576000600b6000858481518110611999577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff021916908315150217905550611a1087848381518110611a03577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611db9565b8080611a1b90614fd3565b915050611952565b5050505b50505050565b611a378282612a4c565b611a5c816001600085815260200190815260200160002061238390919063ffffffff16565b505050565b6060611a6c82611696565b60096000848152602001908152602001600020604051602001611a909291906147c0565b6040516020818303038152906040529050919050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611b688282612a75565b5050565b6000611b94836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612b55565b905092915050565b60007f2a55205a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611c6757507fcad96cca000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611c775750611c7682612bc5565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d6583610ead565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e20906149d7565b60405180910390fd5b611e3281611c7e565b15611e72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6990614897565b60405180910390fd5b611e7e60008383612ca7565b6001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ece9190614cdb565b92505081905550816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6001816000016000828254019250508190555050565b6000611fa882611c7e565b611fe7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fde90614917565b60405180910390fd5b6000611ff283610ead565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061206157508373ffffffffffffffffffffffffffffffffffffffff166120498461082e565b73ffffffffffffffffffffffffffffffffffffffff16145b8061207257506120718185611aca565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661209b82610ead565b73ffffffffffffffffffffffffffffffffffffffff16146120f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e890614a17565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612161576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612158906148b7565b60405180910390fd5b61216c838383612ca7565b612177600082611cf2565b6001600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121c79190614dbc565b925050819055506001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461221e9190614cdb565b92505081905550816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6122e082610acf565b6122f1816122ec611cea565b6123b3565b6122fb8383612a75565b505050565b612308611cea565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236c90614ad7565b60405180910390fd5b61237f8282612cb7565b5050565b60006123ab836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612d98565b905092915050565b6123bd82826110a3565b61244c576123e28173ffffffffffffffffffffffffffffffffffffffff166014612f1e565b6123f08360001c6020612f1e565b604051602001612401929190614636565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612443919061479e565b60405180910390fd5b5050565b612458610e96565b612497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248e90614837565b60405180910390fd5b6000600860006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6124db611cea565b6040516124e89190614670565b60405180910390a1565b60006124fd82610ead565b905061250b81600084612ca7565b612516600083611cf2565b6001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125669190614dbc565b925050819055506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080600090505b82518110156128ca57600073ffffffffffffffffffffffffffffffffffffffff16838281518110612665577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1614156126c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126bf90614a97565b60405180910390fd5b6000838281518110612703577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001516bffffffffffffffffffffffff16141561275e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275590614937565b60405180910390fd5b828181518110612797577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001516bffffffffffffffffffffffff16826127bc9190614cdb565b91506009600085815260200190815260200160002083828151811061280a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550505080806128c290614fd3565b91505061260b565b50612710811061290f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290690614a77565b60405180910390fd5b6129198383613218565b505050565b612926610e96565b15612966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295d90614957565b60405180910390fd5b6001600860006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586129aa611cea565b6040516129b79190614670565b60405180910390a1565b60006129d08360000183613255565b60001c905092915050565b6129e684848461207b565b6129f2848484846132a6565b612a31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a2890614877565b60405180910390fd5b50505050565b6000612a458260000161343d565b9050919050565b612a5582610acf565b612a6681612a61611cea565b6123b3565b612a708383612cb7565b505050565b612a7f82826110a3565b612b5157600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612af6611cea565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000612b61838361344e565b612bba578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612bbf565b600090505b92915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612c9057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612ca05750612c9f82613471565b5b9050919050565b612cb28383836134eb565b505050565b612cc182826110a3565b15612d9457600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612d39611cea565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60008083600101600084815260200190815260200160002054905060008114612f12576000600182612dca9190614dbc565b9050600060018660000180549050612de29190614dbc565b9050818114612e9d576000866000018281548110612e29577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110612e73577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612ed7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612f18565b60009150505b92915050565b606060006002836002612f319190614d62565b612f3b9190614cdb565b67ffffffffffffffff811115612f7a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612fac5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061300a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613094577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026130d49190614d62565b6130de9190614cdb565b90505b60018111156131ca577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110613146577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110613183577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806131c390614f12565b90506130e1565b506000841461320e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613205906147f7565b60405180910390fd5b8091505092915050565b7f3fa96d7b6bcbfe71ef171666d84db3cf52fa2d1c8afdb1cc8e486177f208b7df8282604051613249929190614b12565b60405180910390a15050565b6000826000018281548110613293577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b60006132c78473ffffffffffffffffffffffffffffffffffffffff16613543565b15613430578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026132f0611cea565b8786866040518563ffffffff1660e01b8152600401613312949392919061468b565b602060405180830381600087803b15801561332c57600080fd5b505af192505050801561335d57506040513d601f19601f8201168201806040525081019061335a9190613e1d565b60015b6133e0573d806000811461338d576040519150601f19603f3d011682016040523d82523d6000602084013e613392565b606091505b506000815114156133d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133cf90614877565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613435565b600190505b949350505050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806134e457506134e382613556565b5b9050919050565b6134f68383836135d0565b6134fe610e96565b1561353e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161353590614817565b60405180910390fd5b505050565b600080823b905060008111915050919050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806135c957506135c8826135d5565b5b9050919050565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b82805461364b90614f3c565b90600052602060002090601f01602090048101928261366d57600085556136b4565b82601f1061368657805160ff19168380011785556136b4565b828001600101855582156136b4579182015b828111156136b3578251825591602001919060010190613698565b5b5090506136c191906136c5565b5090565b5b808211156136de5760008160009055506001016136c6565b5090565b60006136f56136f084614b67565b614b42565b9050808382526020820190508285604086028201111561371457600080fd5b60005b85811015613744578161372a8882613a58565b845260208401935060408301925050600181019050613717565b5050509392505050565b600061376161375c84614b93565b614b42565b9050808382526020820190508285602086028201111561378057600080fd5b60005b858110156137b057816137968882613aa4565b845260208401935060208301925050600181019050613783565b5050509392505050565b60006137cd6137c884614bbf565b614b42565b9050828152602081018484840111156137e557600080fd5b6137f0848285614ed0565b509392505050565b600061380b61380684614bbf565b614b42565b90508281526020810184848401111561382357600080fd5b61382e848285614edf565b509392505050565b600061384961384484614bf0565b614b42565b90508281526020810184848401111561386157600080fd5b61386c848285614ed0565b509392505050565b600081359050613883816157e6565b92915050565b600081359050613898816157fd565b92915050565b600082601f8301126138af57600080fd5b81356138bf8482602086016136e2565b91505092915050565b60008083601f8401126138da57600080fd5b8235905067ffffffffffffffff8111156138f357600080fd5b60208301915083602082028301111561390b57600080fd5b9250929050565b600082601f83011261392357600080fd5b813561393384826020860161374e565b91505092915050565b60008135905061394b81615814565b92915050565b6000813590506139608161582b565b92915050565b60008135905061397581615842565b92915050565b60008151905061398a81615842565b92915050565b60008083601f8401126139a257600080fd5b8235905067ffffffffffffffff8111156139bb57600080fd5b6020830191508360018202830111156139d357600080fd5b9250929050565b600082601f8301126139eb57600080fd5b81356139fb8482602086016137ba565b91505092915050565b600082601f830112613a1557600080fd5b8151613a258482602086016137f8565b91505092915050565b600082601f830112613a3f57600080fd5b8135613a4f848260208601613836565b91505092915050565b600060408284031215613a6a57600080fd5b613a746040614b42565b90506000613a8484828501613889565b6000830152506020613a9884828501613ab9565b60208301525092915050565b600081359050613ab381615859565b92915050565b600081359050613ac881615870565b92915050565b600060208284031215613ae057600080fd5b6000613aee84828501613874565b91505092915050565b60008060408385031215613b0a57600080fd5b6000613b1885828601613874565b9250506020613b2985828601613874565b9150509250929050565b600080600060608486031215613b4857600080fd5b6000613b5686828701613874565b9350506020613b6786828701613874565b9250506040613b7886828701613aa4565b9150509250925092565b60008060008060808587031215613b9857600080fd5b6000613ba687828801613874565b9450506020613bb787828801613874565b9350506040613bc887828801613aa4565b925050606085013567ffffffffffffffff811115613be557600080fd5b613bf1878288016139da565b91505092959194509250565b60008060408385031215613c1057600080fd5b6000613c1e85828601613874565b9250506020613c2f8582860161393c565b9150509250929050565b600080600060408486031215613c4e57600080fd5b6000613c5c86828701613874565b935050602084013567ffffffffffffffff811115613c7957600080fd5b613c8586828701613990565b92509250509250925092565b60008060408385031215613ca457600080fd5b6000613cb285828601613874565b9250506020613cc385828601613aa4565b9150509250929050565b60008060208385031215613ce057600080fd5b600083013567ffffffffffffffff811115613cfa57600080fd5b613d06858286016138c8565b92509250509250929050565b600060208284031215613d2457600080fd5b600082013567ffffffffffffffff811115613d3e57600080fd5b613d4a84828501613912565b91505092915050565b600060208284031215613d6557600080fd5b6000613d7384828501613951565b91505092915050565b60008060408385031215613d8f57600080fd5b6000613d9d85828601613951565b9250506020613dae85828601613874565b9150509250929050565b60008060408385031215613dcb57600080fd5b6000613dd985828601613951565b9250506020613dea85828601613aa4565b9150509250929050565b600060208284031215613e0657600080fd5b6000613e1484828501613966565b91505092915050565b600060208284031215613e2f57600080fd5b6000613e3d8482850161397b565b91505092915050565b600060208284031215613e5857600080fd5b600082015167ffffffffffffffff811115613e7257600080fd5b613e7e84828501613a04565b91505092915050565b600060208284031215613e9957600080fd5b600082013567ffffffffffffffff811115613eb357600080fd5b613ebf84828501613a2e565b91505092915050565b60008060408385031215613edb57600080fd5b600083013567ffffffffffffffff811115613ef557600080fd5b613f0185828601613a2e565b925050602083013567ffffffffffffffff811115613f1e57600080fd5b613f2a8582860161389e565b9150509250929050565b600060208284031215613f4657600080fd5b6000613f5484828501613aa4565b91505092915050565b60008060408385031215613f7057600080fd5b6000613f7e85828601613aa4565b9250506020613f8f85828601613aa4565b9150509250929050565b6000613fa5838361456c565b60408301905092915050565b6000613fbd838361459b565b60408301905092915050565b613fd281614e3a565b82525050565b613fe181614e28565b82525050565b6000613ff282614c46565b613ffc8185614c8c565b935061400783614c21565b8060005b8381101561403857815161401f8882613f99565b975061402a83614c72565b92505060018101905061400b565b5085935050505092915050565b600061405082614c51565b61405a8185614c8c565b935061406583614c31565b8060005b83811015614095578161407c8882613fb1565b975061408783614c7f565b925050600181019050614069565b5085935050505092915050565b60006140ae8385614c9d565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156140dd57600080fd5b6020830292506140ee838584614ed0565b82840190509392505050565b61410381614e4c565b82525050565b61411281614e58565b82525050565b600061412382614c5c565b61412d8185614cae565b935061413d818560208601614edf565b614146816150e2565b840191505092915050565b600061415c82614c67565b6141668185614cbf565b9350614176818560208601614edf565b61417f816150e2565b840191505092915050565b600061419582614c67565b61419f8185614cd0565b93506141af818560208601614edf565b80840191505092915050565b60006141c8602083614cbf565b91506141d38261510d565b602082019050919050565b60006141eb602b83614cbf565b91506141f682615136565b604082019050919050565b600061420e601483614cbf565b915061421982615185565b602082019050919050565b6000614231602383614cbf565b915061423c826151ae565b604082019050919050565b6000614254603283614cbf565b915061425f826151fd565b604082019050919050565b6000614277601c83614cbf565b91506142828261524c565b602082019050919050565b600061429a602483614cbf565b91506142a582615275565b604082019050919050565b60006142bd601983614cbf565b91506142c8826152c4565b602082019050919050565b60006142e0602f83614cbf565b91506142eb826152ed565b604082019050919050565b6000614303602c83614cbf565b915061430e8261533c565b604082019050919050565b6000614326602083614cbf565b91506143318261538b565b602082019050919050565b6000614349601083614cbf565b9150614354826153b4565b602082019050919050565b600061436c603883614cbf565b9150614377826153dd565b604082019050919050565b600061438f602a83614cbf565b915061439a8261542c565b604082019050919050565b60006143b2602983614cbf565b91506143bd8261547b565b604082019050919050565b60006143d5602083614cbf565b91506143e0826154ca565b602082019050919050565b60006143f8602c83614cbf565b9150614403826154f3565b604082019050919050565b600061441b602983614cbf565b915061442682615542565b604082019050919050565b600061443e602483614cd0565b915061444982615591565b602482019050919050565b6000614461602183614cbf565b915061446c826155e0565b604082019050919050565b6000614484603183614cbf565b915061448f8261562f565b604082019050919050565b60006144a7602583614cbf565b91506144b28261567e565b604082019050919050565b60006144ca601783614cd0565b91506144d5826156cd565b601782019050919050565b60006144ed601b83614cbf565b91506144f8826156f6565b602082019050919050565b6000614510603083614cbf565b915061451b8261571f565b604082019050919050565b6000614533601183614cd0565b915061453e8261576e565b601182019050919050565b6000614556602f83614cbf565b915061456182615797565b604082019050919050565b6040820160008201516145826000850182613fc9565b5060208201516145956020850182614601565b50505050565b6040820160008083015490506145b081614f6e565b6145bd6000860182613fc9565b506145c781614f88565b6145d46020860182614601565b5050505050565b6145e481614eae565b82525050565b6145fb6145f682614eae565b61501c565b82525050565b61460a81614eb8565b82525050565b600061461b82614431565b915061462782846145ea565b60208201915081905092915050565b6000614641826144bd565b915061464d828561418a565b915061465882614526565b9150614664828461418a565b91508190509392505050565b60006020820190506146856000830184613fd8565b92915050565b60006080820190506146a06000830187613fd8565b6146ad6020830186613fd8565b6146ba60408301856145db565b81810360608301526146cc8184614118565b905095945050505050565b60006040820190506146ec6000830185613fd8565b6146f960208301846145db565b9392505050565b6000602082019050818103600083015261471a8184613fe7565b905092915050565b6000602082019050818103600083015261473d8184866140a2565b90509392505050565b600060208201905061475b60008301846140fa565b92915050565b60006020820190506147766000830184614109565b92915050565b600060208201905081810360008301526147968184614118565b905092915050565b600060208201905081810360008301526147b88184614151565b905092915050565b600060408201905081810360008301526147da8185614151565b905081810360208301526147ee8184614045565b90509392505050565b60006020820190508181036000830152614810816141bb565b9050919050565b60006020820190508181036000830152614830816141de565b9050919050565b6000602082019050818103600083015261485081614201565b9050919050565b6000602082019050818103600083015261487081614224565b9050919050565b6000602082019050818103600083015261489081614247565b9050919050565b600060208201905081810360008301526148b08161426a565b9050919050565b600060208201905081810360008301526148d08161428d565b9050919050565b600060208201905081810360008301526148f0816142b0565b9050919050565b60006020820190508181036000830152614910816142d3565b9050919050565b60006020820190508181036000830152614930816142f6565b9050919050565b6000602082019050818103600083015261495081614319565b9050919050565b600060208201905081810360008301526149708161433c565b9050919050565b600060208201905081810360008301526149908161435f565b9050919050565b600060208201905081810360008301526149b081614382565b9050919050565b600060208201905081810360008301526149d0816143a5565b9050919050565b600060208201905081810360008301526149f0816143c8565b9050919050565b60006020820190508181036000830152614a10816143eb565b9050919050565b60006020820190508181036000830152614a308161440e565b9050919050565b60006020820190508181036000830152614a5081614454565b9050919050565b60006020820190508181036000830152614a7081614477565b9050919050565b60006020820190508181036000830152614a908161449a565b9050919050565b60006020820190508181036000830152614ab0816144e0565b9050919050565b60006020820190508181036000830152614ad081614503565b9050919050565b60006020820190508181036000830152614af081614549565b9050919050565b6000602082019050614b0c60008301846145db565b92915050565b6000604082019050614b2760008301856145db565b8181036020830152614b398184613fe7565b90509392505050565b6000614b4c614b5d565b9050614b588282614fa2565b919050565b6000604051905090565b600067ffffffffffffffff821115614b8257614b816150b3565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614bae57614bad6150b3565b5b602082029050602081019050919050565b600067ffffffffffffffff821115614bda57614bd96150b3565b5b614be3826150e2565b9050602081019050919050565b600067ffffffffffffffff821115614c0b57614c0a6150b3565b5b614c14826150e2565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081549050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000600182019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614ce682614eae565b9150614cf183614eae565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614d2657614d25615026565b5b828201905092915050565b6000614d3c82614eae565b9150614d4783614eae565b925082614d5757614d56615055565b5b828204905092915050565b6000614d6d82614eae565b9150614d7883614eae565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614db157614db0615026565b5b828202905092915050565b6000614dc782614eae565b9150614dd283614eae565b925082821015614de557614de4615026565b5b828203905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b6000614e3382614e8e565b9050919050565b6000614e4582614e8e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015614efd578082015181840152602081019050614ee2565b83811115614f0c576000848401525b50505050565b6000614f1d82614eae565b91506000821415614f3157614f30615026565b5b600182039050919050565b60006002820490506001821680614f5457607f821691505b60208210811415614f6857614f67615084565b5b50919050565b6000614f81614f7c836150f3565b614df0565b9050919050565b6000614f9b614f9683615100565b614e10565b9050919050565b614fab826150e2565b810181811067ffffffffffffffff82111715614fca57614fc96150b3565b5b80604052505050565b6000614fde82614eae565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561501157615010615026565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b60008160a01c9050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4552433732315061757361626c653a20746f6b656e207472616e73666572207760008201527f68696c6520706175736564000000000000000000000000000000000000000000602082015250565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b7f4552433732314c656d6f6e6164653a20455843454544535f42415443485f4c4960008201527f4d49540000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732314c656d6f6e6164653a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f526f79616c74792076616c75652073686f756c6420626520706f736974697665600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314c656d6f6e6164653a20494e56414c49445f544f4b454e5f4f5760008201527f4e45522000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f526f79616c747920746f74616c2076616c75652073686f756c64206265203c2060008201527f3130303030000000000000000000000000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f526563697069656e742073686f756c642062652070726573656e740000000000600082015250565b7f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6157ef81614e28565b81146157fa57600080fd5b50565b61580681614e3a565b811461581157600080fd5b50565b61581d81614e4c565b811461582857600080fd5b50565b61583481614e58565b811461583f57600080fd5b50565b61584b81614e62565b811461585657600080fd5b50565b61586281614eae565b811461586d57600080fd5b50565b61587981614eb8565b811461588457600080fd5b5056fea264697066735822122056b3fa7eab075b33afaa546e2e97129fc9c4d145307e1d5df8d9cb808c3d4a5464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "deposit(address,bytes)": {
        "details": "see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2160"
      },
      "encodeState(uint256)": {
        "details": "see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2255"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "withdraw(uint256)": {
        "details": "see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2191"
      },
      "withdrawBatch(uint256[])": {
        "details": "see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2202"
      },
      "withdrawWithMetadata(uint256)": {
        "details": "see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2234"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 325,
        "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2663_storage)"
      },
      {
        "astId": 701,
        "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 703,
        "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 707,
        "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 711,
        "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
        "label": "_balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 715,
        "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 721,
        "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 601,
        "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
        "label": "_paused",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 3597,
        "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
        "label": "royalties",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_struct(Part)3545_storage)dyn_storage)"
      },
      {
        "astId": 2989,
        "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Counter)2044_storage"
      },
      {
        "astId": 2993,
        "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
        "label": "_tokenWithdrawn",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2997,
        "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Part)3545_storage)dyn_storage": {
        "base": "t_struct(Part)3545_storage",
        "encoding": "dynamic_array",
        "label": "struct LibPart.Part[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2663_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2663_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(Part)3545_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibPart.Part[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Part)3545_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2663_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2662,
            "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2362_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)2044_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2043,
            "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Part)3545_storage": {
        "encoding": "inplace",
        "label": "struct LibPart.Part",
        "members": [
          {
            "astId": 3542,
            "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 3544,
            "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
            "label": "value",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2362_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2357,
            "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2361,
            "contract": "contracts/ERC721Lemonade.sol:ERC721Lemonade",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}