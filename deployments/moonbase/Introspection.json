{
  "address": "0xea8E7559ffAbAae89aCa06C0cd5b2115adCf287E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "interfaceIds",
          "type": "bytes4[]"
        }
      ],
      "name": "getSupportedInterfaces",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x95d39215bd274c6309ce21b5e0f343f216a0ce91019567960c7eb91b1c71b655",
  "receipt": {
    "to": null,
    "from": "0xFB756b44060e426731e54e9F433c43c75ee90d9f",
    "contractAddress": "0xea8E7559ffAbAae89aCa06C0cd5b2115adCf287E",
    "transactionIndex": 0,
    "gasUsed": "306771",
    "logsBloom": "0x
    "blockHash": "0xc9530410d2588e82707f33ac132b1f97bd100ac255831b5c4dc994ea6b7a3651",
    "transactionHash": "0x95d39215bd274c6309ce21b5e0f343f216a0ce91019567960c7eb91b1c71b655",
    "logs": [],
    "blockNumber": 2663646,
    "cumulativeGasUsed": "306771",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "718bfb621f2f340f8e52c49d4c3534de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"interfaceIds\",\"type\":\"bytes4[]\"}],\"name\":\"getSupportedInterfaces\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Introspection.sol\":\"Introspection\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Introspection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\ncontract Introspection {\\n    using ERC165Checker for address;\\n\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) public view returns (bool[] memory) {\\n        return account.getSupportedInterfaces(interfaceIds);\\n    }\\n}\\n\",\"keccak256\":\"0x014b385ab611a1f85d56d75075451efca2c9b283f701a990b4ade71d56145d3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610496806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806377e6b4cc14610030575b600080fd5b61004361003e36600461029d565b610059565b60405161005091906103dd565b60405180910390f35b606061006e6001600160a01b03841683610077565b90505b92915050565b60606000825167ffffffffffffffff8111156100a357634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156100cc578160200160208202803683370190505b5090506100d884610164565b1561006e5760005b835181101561015c5761011a8585838151811061010d57634e487b7160e01b600052603260045260246000fd5b6020026020010151610197565b82828151811061013a57634e487b7160e01b600052603260045260246000fd5b911515602092830291909101909101528061015481610423565b9150506100e0565b509392505050565b6000610177826301ffc9a760e01b610197565b80156100715750610190826001600160e01b0319610197565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b03871690617530906101fe9086906103a4565b6000604051808303818686fa925050503d806000811461023a576040519150601f19603f3d011682016040523d82523d6000602084013e61023f565b606091505b509150915060208151101561025a5760009350505050610071565b8180156102765750808060200190518101906102769190610384565b9695505050505050565b80356001600160e01b03198116811461029857600080fd5b919050565b600080604083850312156102af578182fd5b82356001600160a01b03811681146102c5578283fd5b915060208381013567ffffffffffffffff808211156102e2578384fd5b818601915086601f8301126102f5578384fd5b8135818111156103075761030761044a565b8060051b604051601f19603f8301168101818110858211171561032c5761032c61044a565b604052828152858101935084860182860187018b101561034a578788fd5b8795505b838610156103735761035f81610280565b85526001959095019493860193860161034e565b508096505050505050509250929050565b600060208284031215610395578081fd5b8151801515811461006e578182fd5b60008251815b818110156103c457602081860181015185830152016103aa565b818111156103d25782828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156104175783511515835292840192918401916001016103f9565b50909695505050505050565b600060001982141561044357634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c038e5a95b3eea38fe4e6c1a91bc404bb6bf35aeb28e7699146ad6c5c20743ec64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806377e6b4cc14610030575b600080fd5b61004361003e36600461029d565b610059565b60405161005091906103dd565b60405180910390f35b606061006e6001600160a01b03841683610077565b90505b92915050565b60606000825167ffffffffffffffff8111156100a357634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156100cc578160200160208202803683370190505b5090506100d884610164565b1561006e5760005b835181101561015c5761011a8585838151811061010d57634e487b7160e01b600052603260045260246000fd5b6020026020010151610197565b82828151811061013a57634e487b7160e01b600052603260045260246000fd5b911515602092830291909101909101528061015481610423565b9150506100e0565b509392505050565b6000610177826301ffc9a760e01b610197565b80156100715750610190826001600160e01b0319610197565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b03871690617530906101fe9086906103a4565b6000604051808303818686fa925050503d806000811461023a576040519150601f19603f3d011682016040523d82523d6000602084013e61023f565b606091505b509150915060208151101561025a5760009350505050610071565b8180156102765750808060200190518101906102769190610384565b9695505050505050565b80356001600160e01b03198116811461029857600080fd5b919050565b600080604083850312156102af578182fd5b82356001600160a01b03811681146102c5578283fd5b915060208381013567ffffffffffffffff808211156102e2578384fd5b818601915086601f8301126102f5578384fd5b8135818111156103075761030761044a565b8060051b604051601f19603f8301168101818110858211171561032c5761032c61044a565b604052828152858101935084860182860187018b101561034a578788fd5b8795505b838610156103735761035f81610280565b85526001959095019493860193860161034e565b508096505050505050509250929050565b600060208284031215610395578081fd5b8151801515811461006e578182fd5b60008251815b818110156103c457602081860181015185830152016103aa565b818111156103d25782828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156104175783511515835292840192918401916001016103f9565b50909695505050505050565b600060001982141561044357634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c038e5a95b3eea38fe4e6c1a91bc404bb6bf35aeb28e7699146ad6c5c20743ec64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}