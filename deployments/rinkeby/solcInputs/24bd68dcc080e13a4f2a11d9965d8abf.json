{
  "language": "Solidity",
  "sources": {
    "contracts/ERC20Mint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mint is ERC20 {\n    constructor(string memory name, string memory symbol, address owner, uint256 initialSupply) ERC20(name, symbol) {\n       _mint(owner, initialSupply);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ERC721LemonadeParent.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Royalties.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\ncontract ERC721LemonadeParent is Context, AccessControlEnumerable, ERC721Burnable, ERC721Pausable, Royalties {\n    bytes32 public constant PREDICATE_ROLE = keccak256(\"PREDICATE_ROLE\");\n\n    mapping (uint256 => string) private _tokenURIs;\n\n    constructor(string memory name, string memory symbol, address mintableAssetProxy) ERC721(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(PREDICATE_ROLE, mintableAssetProxy);\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(_exists(tokenId), \"ERC721LemonadeParent: URI query for nonexistent token\");\n\n        return _tokenURIs[tokenId];\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC721, Royalties)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\n        internal\n        virtual\n        override(ERC721, ERC721Pausable)\n    {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/DummyMintableERC721.sol#L2172\n     */\n    function mint(address to, uint256 tokenId)\n        external\n        onlyRole(PREDICATE_ROLE)\n    {\n        _mint(to, tokenId);\n    }\n\n    /**\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/DummyMintableERC721.sol#L2199\n     */\n    function mint(address to, uint256 tokenId, bytes calldata data)\n        external\n        onlyRole(PREDICATE_ROLE)\n    {\n        _mint(to, tokenId);\n\n        _saveState(tokenId, data);\n    }\n\n    /**\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/DummyMintableERC721.sol#L2209\n     */\n    function exists(uint256 tokenId)\n        external\n        view\n        returns (bool)\n    {\n        return _exists(tokenId);\n    }\n\n   /**\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/DummyMintableERC721.sol#L2181\n     */\n    function _saveState(uint256 tokenId, bytes memory data)\n        internal\n        virtual\n    {\n        (string memory tokenURI_, LibPart.Part[] memory royalties) = abi.decode(data, (string, LibPart.Part[]));\n\n        _tokenURIs[tokenId] = tokenURI_;\n\n        _saveRoyalties(tokenId, royalties);\n    }\n}\n"
    },
    "contracts/Royalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC2981.sol\";\nimport \"./rarible/impl/RoyaltiesV2Impl.sol\";\nimport \"./rarible/LibPart.sol\";\nimport \"./rarible/RoyaltiesV2.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nabstract contract Royalties is ERC165, IERC2981, RoyaltiesV2Impl {\n    function royaltyInfo(uint256 tokenId, uint256 price)\n        external\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        LibPart.Part[] memory royalties_ = royalties[tokenId];\n        uint256 length = royalties_.length;\n\n        if (length == 0) {\n            return (address(0), 0);\n        }\n\n        uint256 totalValue;\n        for (uint256 i; i < length; i++) {\n            totalValue += royalties_[i].value;\n        }\n        return (royalties_[0].account, (price * totalValue) / 10000);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC2981).interfaceId ||\n            interfaceId == type(RoyaltiesV2).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "contracts/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n///\n/// @dev Interface for the NFT Royalty Standard\n///\ninterface IERC2981 is IERC165 {\n    /// ERC165 bytes to add to interface array - set in parent contract\n    /// implementing this standard\n    ///\n    /// bytes4(keccak256(\"royaltyInfo(uint256,uint256)\")) == 0x2a55205a\n    /// bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\n\n    /// @notice Called with the sale price to determine how much royalty\n    //          is owed and to whom.\n    /// @param _tokenId - the NFT asset queried for royalty information\n    /// @param _salePrice - the sale price of the NFT asset specified by _tokenId\n    /// @return receiver - address of who should be sent the royalty payment\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\n    function royaltyInfo(\n        uint256 _tokenId,\n        uint256 _salePrice\n    ) external view returns (\n        address receiver,\n        uint256 royaltyAmount\n    );\n}\n"
    },
    "contracts/rarible/impl/RoyaltiesV2Impl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./AbstractRoyalties.sol\";\nimport \"../RoyaltiesV2.sol\";\n\ncontract RoyaltiesV2Impl is AbstractRoyalties, RoyaltiesV2 {\n\n    function getRaribleV2Royalties(uint256 id) override external view returns (LibPart.Part[] memory) {\n        return royalties[id];\n    }\n\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) override internal {\n        emit RoyaltiesSet(id, _royalties);\n    }\n}\n"
    },
    "contracts/rarible/LibPart.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary LibPart {\n    bytes32 public constant TYPE_HASH = keccak256(\"Part(address account,uint96 value)\");\n\n    struct Part {\n        address payable account;\n        uint96 value;\n    }\n\n    function hash(Part memory part) internal pure returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\n    }\n}\n"
    },
    "contracts/rarible/RoyaltiesV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./LibPart.sol\";\n\ninterface RoyaltiesV2 {\n    event RoyaltiesSet(uint256 tokenId, LibPart.Part[] royalties);\n\n    function getRaribleV2Royalties(uint256 id) external view returns (LibPart.Part[] memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/rarible/impl/AbstractRoyalties.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../LibPart.sol\";\n\nabstract contract AbstractRoyalties {\n    mapping (uint256 => LibPart.Part[]) internal royalties;\n\n    function _saveRoyalties(uint256 id, LibPart.Part[] memory _royalties) internal {\n        uint256 totalValue;\n        for (uint i = 0; i < _royalties.length; i++) {\n            require(_royalties[i].account != address(0x0), \"Recipient should be present\");\n            require(_royalties[i].value != 0, \"Royalty value should be positive\");\n            totalValue += _royalties[i].value;\n            royalties[id].push(_royalties[i]);\n        }\n        require(totalValue < 10000, \"Royalty total value should be < 10000\");\n        _onRoyaltiesSet(id, _royalties);\n    }\n\n    function _updateAccount(uint256 _id, address _from, address _to) internal {\n        uint length = royalties[_id].length;\n        for(uint i = 0; i < length; i++) {\n            if (royalties[_id][i].account == _from) {\n                royalties[_id][i].account = payable(address(uint160(_to)));\n            }\n        }\n    }\n\n    function _onRoyaltiesSet(uint256 id, LibPart.Part[] memory _royalties) virtual internal;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/ERC721Lemonade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./RelayRecipient.sol\";\nimport \"./Royalties.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract ERC721Lemonade is\n    Context,\n    AccessControlEnumerable,\n    ERC721Burnable,\n    ERC721Pausable,\n    RelayRecipient,\n    Royalties\n{\n    using Counters for Counters.Counter;\n\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\"DEPOSITOR_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    Counters.Counter private _tokenIdTracker;\n\n    mapping(uint256 => bool) public _tokenWithdrawn;\n    mapping(uint256 => string) private _tokenURIs;\n\n    event TransferWithMetadata(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId,\n        bytes metaData\n    );\n    event WithdrawnBatch(address indexed user, uint256[] tokenIds);\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address trustedForwarder_,\n        address childChainManager\n    ) ERC721(name, symbol) {\n        trustedForwarder = trustedForwarder_;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    function mintToCaller(string memory tokenURI_)\n        public\n        virtual\n        whenNotPaused\n        returns (uint256)\n    {\n        uint256 tokenId = _tokenIdTracker.current();\n\n        _mint(_msgSender(), tokenId);\n        _tokenURIs[tokenId] = tokenURI_;\n\n        _tokenIdTracker.increment();\n\n        return tokenId;\n    }\n\n    function mintToCallerWithRoyalty(\n        string memory tokenURI_,\n        LibPart.Part[] memory royalties_\n    ) public virtual whenNotPaused returns (uint256) {\n        uint256 tokenId = mintToCaller(tokenURI_);\n\n        _saveRoyalties(tokenId, royalties_);\n\n        return tokenId;\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Lemonade: URI query for nonexistent token\"\n        );\n\n        return _tokenURIs[tokenId];\n    }\n\n    function pause() public virtual onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    function unpause() public virtual onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC721, Royalties)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Context, RelayRecipient)\n        returns (address)\n    {\n        return RelayRecipient._msgSender();\n    }\n\n    function setTrustedForwarder(address trustedForwarder_)\n        public\n        virtual\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        trustedForwarder = trustedForwarder_;\n    }\n\n    /**\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2160\n     */\n    function deposit(address user, bytes calldata depositData)\n        external\n        onlyRole(DEPOSITOR_ROLE)\n    {\n        if (depositData.length == 32) {\n            // deposit single\n            uint256 tokenId = abi.decode(depositData, (uint256));\n\n            _tokenWithdrawn[tokenId] = false;\n            _mint(user, tokenId);\n        } else {\n            // deposit batch\n            uint256[] memory tokenIds = abi.decode(depositData, (uint256[]));\n            uint256 length = tokenIds.length;\n\n            for (uint256 i; i < length; i++) {\n                _tokenWithdrawn[tokenIds[i]] = false;\n                _mint(user, tokenIds[i]);\n            }\n        }\n    }\n\n    /**\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2191\n     */\n    function withdraw(uint256 tokenId) external {\n        withdrawWithMetadata(tokenId);\n    }\n\n    /**\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2202\n     */\n    function withdrawBatch(uint256[] calldata tokenIds) external {\n        uint256 length = tokenIds.length;\n\n        for (uint256 i; i < length; i++) {\n            uint256 tokenId = tokenIds[i];\n\n            withdrawWithMetadata(tokenId);\n        }\n\n        emit WithdrawnBatch(_msgSender(), tokenIds);\n    }\n\n    /**\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2234\n     */\n    function withdrawWithMetadata(uint256 tokenId) public {\n        require(\n            _msgSender() == ownerOf(tokenId),\n            string(\n                abi.encodePacked(\n                    \"ERC721Lemonade: INVALID_TOKEN_OWNER \",\n                    tokenId\n                )\n            )\n        );\n\n        _tokenWithdrawn[tokenId] = true;\n\n        emit TransferWithMetadata(\n            ownerOf(tokenId),\n            address(0),\n            tokenId,\n            this.encodeState(tokenId)\n        );\n\n        _burn(tokenId);\n    }\n\n    /**\n     * @dev see https://github.com/maticnetwork/pos-portal/blob/88dbf0a88fd68fa11f7a3b9d36629930f6b93a05/flat/ChildMintableERC721.sol#L2255\n     */\n    function encodeState(uint256 tokenId)\n        external\n        view\n        virtual\n        returns (bytes memory)\n    {\n        return abi.encode(tokenURI(tokenId), royalties[tokenId]);\n    }\n}\n"
    },
    "contracts/RelayRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./forwarder/BaseRelayRecipient.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\nabstract contract RelayRecipient is BaseRelayRecipient {\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(BaseRelayRecipient)\n        returns (address)\n    {\n        return BaseRelayRecipient._msgSender();\n    }\n\n    function versionRecipient() external pure override returns (string memory) {\n        return \"1\";\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/forwarder/BaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IRelayRecipient.sol\";\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\nabstract contract BaseRelayRecipient is IRelayRecipient {\n\n    /*\n     * Forwarder singleton we accept calls from\n     */\n    address public trustedForwarder;\n\n    /*\n     * require a function to be called through GSN only\n     */\n    modifier trustedForwarderOnly() {\n        require(msg.sender == address(trustedForwarder), \"Function can only be called through the trusted Forwarder\");\n        _;\n    }\n\n    function isTrustedForwarder(address forwarder) public override view returns(bool) {\n        return forwarder == trustedForwarder;\n    }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal override virtual view returns (address ret) {\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n}\n"
    },
    "contracts/forwarder/interfaces/IRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.8.0;\n\n/**\n * a contract must implement this interface in order to support relayed transaction.\n * It is better to inherit the BaseRelayRecipient as its implementation.\n */\nabstract contract IRelayRecipient {\n\n    /**\n     * return if the forwarder is trusted to forward relayed transactions to us.\n     * the forwarder is required to verify the sender's signature, and verify\n     * the call is not a replay.\n     */\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n     * of the msg.data.\n     * otherwise, return `msg.sender`\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal virtual view returns (address);\n\n    function versionRecipient() external virtual view returns (string memory);\n}\n"
    },
    "contracts/LemonadePoapV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./rarible/LibPart.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nbytes4 constant ERC2981_INTERFACE_ID = 0x2a55205a;\nbytes4 constant RaribleRoyaltiesV2_INTERFACE_ID = 0xcad96cca;\n\ninterface ILemonadePoapV1 is IERC721 {\n    function claim() external;\n\n    function hasClaimed(address claimer) external view returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function totalUnclaimed() external view returns (uint256);\n}\n\ncontract LemonadePoapV1 is ERC721, ILemonadePoapV1, Ownable {\n    using Counters for Counters.Counter;\n\n    address private _creator;\n    string private _tokenURI;\n    uint256 private _totalSupply;\n    LibPart.Part[] private _royalties;\n\n    Counters.Counter private _tokenIdTracker;\n    mapping(address => bool) private _claimers;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address creator,\n        string memory tokenURI_,\n        uint256 totalSupply_,\n        LibPart.Part[] memory royalties\n    ) ERC721(name, symbol) {\n        _creator = creator;\n        _tokenURI = tokenURI_;\n        _totalSupply = totalSupply_;\n\n        uint256 length = royalties.length;\n        for (uint256 i; i < length; i++) {\n            _royalties.push(royalties[i]);\n        }\n\n        _claim(creator);\n        _transferOwnership(creator);\n    }\n\n    function _claim(address claimer) internal virtual {\n        uint256 tokenId = _tokenIdTracker.current();\n\n        _mint(claimer, tokenId);\n\n        _tokenIdTracker.increment();\n        _claimers[claimer] = true;\n    }\n\n    function claim() public virtual override {\n        uint256 tokenId = _tokenIdTracker.current();\n        address claimer = _msgSender();\n\n        require(tokenId < _totalSupply, \"LemonadePoap: all tokens claimed\");\n        require(!_claimers[claimer], \"LemonadePoap: already claimed\");\n\n        _claim(claimer);\n    }\n\n    function hasClaimed(address claimer)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _claimers[claimer];\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function totalUnclaimed() public view virtual override returns (uint256) {\n        return _totalSupply - _tokenIdTracker.current();\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, ERC721)\n        returns (bool)\n    {\n        return\n            interfaceId == ERC2981_INTERFACE_ID ||\n            interfaceId == RaribleRoyaltiesV2_INTERFACE_ID ||\n            interfaceId == type(ILemonadePoapV1).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"LemonadePoap: URI query for nonexistent token\"\n        );\n\n        return _tokenURI;\n    }\n\n    function getRaribleV2Royalties(uint256)\n        external\n        view\n        returns (LibPart.Part[] memory)\n    {\n        return _royalties;\n    }\n\n    function royaltyInfo(uint256, uint256 price)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        uint256 length = _royalties.length;\n\n        if (length == 0) {\n            return (address(0), 0);\n        }\n\n        uint256 totalValue;\n        for (uint256 i; i < length; i++) {\n            totalValue += _royalties[i].value;\n        }\n        return (_royalties[0].account, (price * totalValue) / 10000);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/LemonadePoapV1Polygon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./LemonadePoapV1.sol\";\nimport \"./RelayRecipient.sol\";\n\ncontract LemonadePoapV1Polygon is LemonadePoapV1, RelayRecipient {\n    address private _trustedOperator;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address creator,\n        string memory tokenURI,\n        uint256 totalSupply,\n        LibPart.Part[] memory royalties,\n        address trustedForwarder_,\n        address trustedOperator\n    ) LemonadePoapV1(name, symbol, creator, tokenURI, totalSupply, royalties) {\n        trustedForwarder = trustedForwarder_;\n        _trustedOperator = trustedOperator;\n    }\n\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override(ERC721)\n        returns (bool isOperator)\n    {\n        if (operator == address(_trustedOperator)) {\n            return true;\n        }\n\n        return ERC721.isApprovedForAll(owner, operator);\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Context, RelayRecipient)\n        returns (address)\n    {\n        address payable sender;\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = payable(RelayRecipient._msgSender());\n        }\n        return sender;\n    }\n}\n"
    },
    "contracts/LemonadePoapV1Forwardable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./LemonadePoapV1.sol\";\nimport \"./RelayRecipient.sol\";\n\ncontract LemonadePoapV1Forwardable is LemonadePoapV1, RelayRecipient {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address creator,\n        string memory tokenURI,\n        uint256 totalSupply,\n        LibPart.Part[] memory royalties,\n        address trustedForwarder_\n    ) LemonadePoapV1(name, symbol, creator, tokenURI, totalSupply, royalties) {\n        trustedForwarder = trustedForwarder_;\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Context, RelayRecipient)\n        returns (address)\n    {\n        return RelayRecipient._msgSender();\n    }\n}\n"
    },
    "contracts/LemonadeMarketplaceV1Forwardable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./LemonadeMarketplaceV1.sol\";\nimport \"./RelayRecipient.sol\";\n\ncontract LemonadeMarketplaceV1Forwardable is LemonadeMarketplaceV1, RelayRecipient {\n    constructor(\n        address feeAccount,\n        uint96 feeValue,\n        address trustedForwarder_\n    ) LemonadeMarketplaceV1(feeAccount, feeValue) {\n        trustedForwarder = trustedForwarder_;\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Context, RelayRecipient)\n        returns (address)\n    {\n        return RelayRecipient._msgSender();\n    }\n\n    function setTrustedForwarder(address trustedForwarder_)\n        external\n        virtual\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        trustedForwarder = trustedForwarder_;\n    }\n}\n"
    },
    "contracts/LemonadeMarketplaceV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC2981.sol\";\nimport \"./rarible/RoyaltiesV2.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract LemonadeMarketplaceV1 is AccessControlEnumerable, Pausable {\n    using Counters for Counters.Counter;\n\n    address public immutable FEE_ACCOUNT;\n    uint96 public immutable FEE_VALUE;\n\n    enum OrderKind {\n        Direct,\n        Auction\n    }\n\n    event OrderCreated(\n        uint256 indexed orderId,\n        OrderKind kind,\n        uint256 openFrom,\n        uint256 openTo,\n        address indexed maker,\n        address currency,\n        uint256 price,\n        address tokenContract,\n        uint256 tokenId\n    );\n    event OrderBid(\n        uint256 indexed orderId,\n        address indexed bidder,\n        uint256 bidAmount\n    );\n    event OrderFilled(\n        uint256 indexed orderId,\n        address indexed taker,\n        uint256 paidAmount\n    );\n    event OrderCancelled(uint256 indexed orderId);\n\n    struct Order {\n        OrderKind kind;\n        bool open;\n        uint256 openFrom;\n        uint256 openTo;\n        address maker;\n        address currency;\n        uint256 price;\n        address tokenContract;\n        uint256 tokenId;\n        address bidder;\n        uint256 bidAmount;\n        address taker;\n        uint256 paidAmount;\n    }\n    mapping(uint256 => Order) private _orders;\n\n    Counters.Counter private _orderIdTracker;\n\n    constructor(address feeAccount, uint96 feeValue) {\n        FEE_ACCOUNT = feeAccount;\n        FEE_VALUE = feeValue;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n    }\n\n    function fee() external view returns (address, uint96) {\n        return (FEE_ACCOUNT, FEE_VALUE);\n    }\n\n    function order(uint256 orderId)\n        external\n        view\n        virtual\n        whenExists(orderId)\n        returns (\n            OrderKind,\n            bool,\n            uint256,\n            uint256,\n            address,\n            address,\n            uint256,\n            uint256,\n            address,\n            uint256\n        )\n    {\n        Order memory order_ = _orders[orderId];\n        return (\n            order_.kind,\n            order_.open,\n            order_.openFrom,\n            order_.openTo,\n            order_.maker,\n            order_.currency,\n            order_.price,\n            order_.bidAmount,\n            order_.taker,\n            order_.paidAmount\n        );\n    }\n\n    function token(uint256 orderId)\n        external\n        view\n        virtual\n        whenExists(orderId)\n        returns (address, uint256)\n    {\n        return (_orders[orderId].tokenContract, _orders[orderId].tokenId);\n    }\n\n    function createOrder(\n        OrderKind kind,\n        uint256 openFrom,\n        uint256 openTo,\n        address currency,\n        uint256 price,\n        address tokenContract,\n        uint256 tokenId\n    ) external virtual whenNotPaused returns (uint256) {\n        uint256 openDuration_ = openDuration(openFrom, openTo);\n\n        require(\n            openDuration_ > 0,\n            \"LemonadeMarketplace: order must be open at some point\"\n        );\n\n        if (kind == OrderKind.Auction) {\n            require(\n                openDuration_ <= 30 * 24 * 60 * 60,\n                \"LemonadeMarketplace: order of kind auction must not be open for more than 30 days\"\n            );\n        }\n\n        IERC721(tokenContract).transferFrom(\n            _msgSender(),\n            address(this),\n            tokenId\n        );\n\n        uint256 orderId = _orderIdTracker.current();\n\n        _orders[orderId] = Order({\n            kind: kind,\n            open: true,\n            openFrom: openFrom,\n            openTo: openTo,\n            maker: _msgSender(),\n            currency: currency,\n            price: price,\n            tokenContract: tokenContract,\n            tokenId: tokenId,\n            bidder: address(0),\n            bidAmount: 0,\n            taker: address(0),\n            paidAmount: 0\n        });\n\n        _orderIdTracker.increment();\n\n        Order memory order_ = _orders[orderId];\n        emit OrderCreated(\n            orderId,\n            order_.kind,\n            order_.openFrom,\n            order_.openTo,\n            order_.maker,\n            order_.currency,\n            order_.price,\n            order_.tokenContract,\n            order_.tokenId\n        );\n        return orderId;\n    }\n\n    function cancelOrder(uint256 orderId)\n        external\n        virtual\n        whenNotPaused\n        whenExists(orderId)\n    {\n        Order memory order_ = _orders[orderId];\n        require(\n            order_.maker == _msgSender() ||\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\n            \"LemonadeMarketplace: must be the maker to cancel\"\n        );\n        require(\n            order_.open,\n            \"LemonadeMarketplace: order must be open to cancel\"\n        );\n        require(\n            order_.bidder == address(0),\n            \"LemonadeMarketplace: order must have no bid to cancel\"\n        );\n\n        IERC721(order_.tokenContract).safeTransferFrom(\n            address(this),\n            order_.maker,\n            order_.tokenId\n        );\n\n        _orders[orderId].open = false;\n        emit OrderCancelled(orderId);\n    }\n\n    function bidOrder(uint256 orderId, uint256 amount)\n        external\n        virtual\n        whenNotPaused\n        whenExists(orderId)\n    {\n        Order memory order_ = _orders[orderId];\n        require(\n            order_.kind == OrderKind.Auction,\n            \"LemonadeMarketplace: order must be of kind auction to bid\"\n        );\n        require(order_.open, \"LemonadeMarketplace: order must be open to bid\");\n        require(\n            order_.openFrom <= block.timestamp,\n            \"LemonadeMarketplace: order must be open to bid - too early\"\n        );\n        require(\n            order_.openTo > block.timestamp,\n            \"LemonadeMarketplace: order must be open to bid - too late\"\n        );\n        require(\n            order_.price <= amount,\n            \"LemonadeMarketplace: must match price to bid\"\n        );\n\n        if (order_.bidder != address(0)) {\n            require(\n                order_.bidAmount < amount,\n                \"LemonadeMarketplace: must surpass bid to bid\"\n            );\n\n            transferERC20(\n                order_.currency,\n                address(this),\n                order_.bidder,\n                order_.bidAmount\n            );\n        }\n\n        _orders[orderId].bidder = _msgSender();\n        _orders[orderId].bidAmount = amount;\n        order_ = _orders[orderId];\n\n        transferERC20(\n            order_.currency,\n            order_.bidder,\n            address(this),\n            order_.bidAmount\n        );\n\n        emit OrderBid(orderId, order_.bidder, order_.bidAmount);\n    }\n\n    function fillOrder(uint256 orderId, uint256 amount)\n        external\n        virtual\n        whenNotPaused\n        whenExists(orderId)\n    {\n        Order memory order_ = _orders[orderId];\n        require(order_.open, \"LemonadeMarketplace: order must be open to fill\");\n\n        _orders[orderId].open = false;\n        address spender;\n\n        if (order_.kind == OrderKind.Direct) {\n            require(\n                order_.openFrom <= block.timestamp,\n                \"LemonadeMarketplace: order must be open to fill - too early\"\n            );\n            require(\n                order_.openTo == 0 || order_.openTo > block.timestamp,\n                \"LemonadeMarketplace: order must be open to fill - too late\"\n            );\n            require(\n                order_.price <= amount,\n                \"LemonadeMarketplace: must match price to fill direct order\"\n            );\n\n            _orders[orderId].taker = _msgSender();\n            _orders[orderId].paidAmount = amount;\n            spender = _msgSender();\n        } else if (order_.kind == OrderKind.Auction) {\n            require(\n                (order_.bidder != address(0)),\n                \"LemonadeMarketplace: order must have bid to fill auction order\"\n            );\n            require(\n                (order_.bidder == _msgSender() &&\n                    order_.openTo <= block.timestamp) ||\n                    order_.maker == _msgSender() ||\n                    hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\n                \"LemonadeMarketplace: must be the maker or final bidder to fill auction order\"\n            );\n\n            _orders[orderId].taker = order_.bidder;\n            _orders[orderId].paidAmount = order_.bidAmount;\n            spender = address(this);\n        }\n\n        order_ = _orders[orderId];\n\n        if (order_.paidAmount > 0) {\n            uint256 transferAmount = order_.paidAmount;\n\n            uint256 feeAmount = (order_.paidAmount * FEE_VALUE) / 10000;\n            transferERC20(order_.currency, spender, FEE_ACCOUNT, feeAmount);\n            transferAmount -= feeAmount;\n\n            try\n                RoyaltiesV2(order_.tokenContract).getRaribleV2Royalties(\n                    order_.tokenId\n                )\n            returns (LibPart.Part[] memory royalties) {\n                uint256 length = royalties.length;\n                for (uint256 i; i < length; i++) {\n                    if (order_.maker != royalties[i].account) {\n                        uint256 royaltyAmount = (order_.paidAmount *\n                            royalties[i].value) / 10000;\n                        transferERC20(\n                            order_.currency,\n                            spender,\n                            royalties[i].account,\n                            royaltyAmount\n                        );\n                        transferAmount -= royaltyAmount;\n                    }\n                }\n            } catch {\n                try\n                    IERC2981(order_.tokenContract).royaltyInfo(\n                        order_.tokenId,\n                        order_.paidAmount\n                    )\n                returns (address receiver, uint256 royaltyAmount) {\n                    if (order_.maker != receiver) {\n                        transferERC20(\n                            order_.currency,\n                            spender,\n                            receiver,\n                            royaltyAmount\n                        );\n                        transferAmount -= royaltyAmount;\n                    }\n                } catch {}\n            }\n\n            if (transferAmount > 0) {\n                transferERC20(\n                    order_.currency,\n                    spender,\n                    order_.maker,\n                    transferAmount\n                );\n            }\n        }\n\n        IERC721(order_.tokenContract).safeTransferFrom(\n            address(this),\n            order_.taker,\n            order_.tokenId\n        );\n\n        emit OrderFilled(orderId, order_.taker, order_.paidAmount);\n    }\n\n    function transferERC20(\n        address currency_,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) private {\n        IERC20 currency = IERC20(currency_);\n\n        if (spender == address(this)) {\n            currency.transfer(recipient, amount);\n        } else {\n            currency.transferFrom(spender, recipient, amount); // requires allowance\n        }\n    }\n\n    function openDuration(uint256 openFrom, uint256 openTo)\n        private\n        view\n        returns (uint256)\n    {\n        uint256 start = openFrom < block.timestamp ? block.timestamp : openFrom;\n        uint256 end = openTo == 0 ? type(uint256).max : openTo;\n\n        if (start > end) {\n            // avoids overflow\n            return 0;\n        }\n\n        return end - start;\n    }\n\n    modifier whenExists(uint256 orderId) {\n        require(\n            _orders[orderId].maker != address(0),\n            \"LemonadeMarketplace: order nonexistent\"\n        );\n        _;\n    }\n\n    function pause() external virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpause() external virtual onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n}\n"
    },
    "contracts/LemonadeMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC2981.sol\";\nimport \"./rarible/RoyaltiesV2.sol\";\nimport \"./RelayRecipient.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract LemonadeMarketplace is\n    AccessControlEnumerable,\n    Pausable,\n    RelayRecipient\n{\n    using Counters for Counters.Counter;\n\n    address public immutable FEE_ACCOUNT;\n    uint96 public immutable FEE_VALUE;\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    enum OrderKind {\n        Direct,\n        Auction\n    }\n\n    event OrderCreated(\n        uint256 indexed orderId,\n        OrderKind kind,\n        uint256 openFrom,\n        uint256 openTo,\n        address indexed maker,\n        address currency,\n        uint256 price,\n        address tokenContract,\n        uint256 tokenId\n    );\n    event OrderBid(\n        uint256 indexed orderId,\n        address indexed bidder,\n        uint256 bidAmount\n    );\n    event OrderFilled(\n        uint256 indexed orderId,\n        address indexed taker,\n        uint256 paidAmount\n    );\n    event OrderCancelled(uint256 indexed orderId);\n\n    struct Order {\n        OrderKind kind;\n        bool open;\n        uint256 openFrom;\n        uint256 openTo;\n        address maker;\n        address currency;\n        uint256 price;\n        address tokenContract;\n        uint256 tokenId;\n        address bidder;\n        uint256 bidAmount;\n        address taker;\n        uint256 paidAmount;\n    }\n    mapping(uint256 => Order) private _orders;\n\n    Counters.Counter private _orderIdTracker;\n\n    constructor(\n        address feeAccount,\n        uint96 feeValue,\n        address trustedForwarder_\n    ) {\n        FEE_ACCOUNT = feeAccount;\n        FEE_VALUE = feeValue;\n\n        trustedForwarder = trustedForwarder_;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    function fee() external view returns (address, uint96) {\n        return (FEE_ACCOUNT, FEE_VALUE);\n    }\n\n    function order(uint256 orderId)\n        external\n        view\n        virtual\n        whenExists(orderId)\n        returns (\n            OrderKind,\n            bool,\n            uint256,\n            uint256,\n            address,\n            address,\n            uint256,\n            uint256,\n            address,\n            uint256\n        )\n    {\n        Order memory order_ = _orders[orderId];\n        return (\n            order_.kind,\n            order_.open,\n            order_.openFrom,\n            order_.openTo,\n            order_.maker,\n            order_.currency,\n            order_.price,\n            order_.bidAmount,\n            order_.taker,\n            order_.paidAmount\n        );\n    }\n\n    function token(uint256 orderId)\n        external\n        view\n        virtual\n        whenExists(orderId)\n        returns (address, uint256)\n    {\n        return (_orders[orderId].tokenContract, _orders[orderId].tokenId);\n    }\n\n    function createOrder(\n        OrderKind kind,\n        uint256 openFrom,\n        uint256 openTo,\n        address currency,\n        uint256 price,\n        address tokenContract,\n        uint256 tokenId\n    ) external virtual whenNotPaused returns (uint256) {\n        uint256 openDuration_ = openDuration(openFrom, openTo);\n\n        require(\n            openDuration_ > 0,\n            \"LemonadeMarketplace: order must be open at some point\"\n        );\n\n        if (kind == OrderKind.Auction) {\n            require(\n                openDuration_ <= 30 * 24 * 60 * 60,\n                \"LemonadeMarketplace: order of kind auction must not be open for more than 30 days\"\n            );\n        }\n\n        IERC721(tokenContract).transferFrom(\n            _msgSender(),\n            address(this),\n            tokenId\n        );\n\n        uint256 orderId = _orderIdTracker.current();\n\n        _orders[orderId] = Order({\n            kind: kind,\n            open: true,\n            openFrom: openFrom,\n            openTo: openTo,\n            maker: _msgSender(),\n            currency: currency,\n            price: price,\n            tokenContract: tokenContract,\n            tokenId: tokenId,\n            bidder: address(0),\n            bidAmount: 0,\n            taker: address(0),\n            paidAmount: 0\n        });\n\n        _orderIdTracker.increment();\n\n        Order memory order_ = _orders[orderId];\n        emit OrderCreated(\n            orderId,\n            order_.kind,\n            order_.openFrom,\n            order_.openTo,\n            order_.maker,\n            order_.currency,\n            order_.price,\n            order_.tokenContract,\n            order_.tokenId\n        );\n        return orderId;\n    }\n\n    function cancelOrder(uint256 orderId)\n        external\n        virtual\n        whenNotPaused\n        whenExists(orderId)\n    {\n        Order memory order_ = _orders[orderId];\n        require(\n            order_.maker == _msgSender() ||\n                hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\n            \"LemonadeMarketplace: must be the maker to cancel\"\n        );\n        require(\n            order_.open,\n            \"LemonadeMarketplace: order must be open to cancel\"\n        );\n        require(\n            order_.bidder == address(0),\n            \"LemonadeMarketplace: order must have no bid to cancel\"\n        );\n\n        IERC721(order_.tokenContract).safeTransferFrom(\n            address(this),\n            order_.maker,\n            order_.tokenId\n        );\n\n        _orders[orderId].open = false;\n        emit OrderCancelled(orderId);\n    }\n\n    function bidOrder(uint256 orderId, uint256 amount)\n        external\n        virtual\n        whenNotPaused\n        whenExists(orderId)\n    {\n        Order memory order_ = _orders[orderId];\n        require(\n            order_.kind == OrderKind.Auction,\n            \"LemonadeMarketplace: order must be of kind auction to bid\"\n        );\n        require(order_.open, \"LemonadeMarketplace: order must be open to bid\");\n        require(\n            order_.openFrom <= block.timestamp,\n            \"LemonadeMarketplace: order must be open to bid - too early\"\n        );\n        require(\n            order_.openTo > block.timestamp,\n            \"LemonadeMarketplace: order must be open to bid - too late\"\n        );\n        require(\n            order_.price <= amount,\n            \"LemonadeMarketplace: must match price to bid\"\n        );\n\n        if (order_.bidder != address(0)) {\n            require(\n                order_.bidAmount < amount,\n                \"LemonadeMarketplace: must surpass bid to bid\"\n            );\n\n            transferERC20(\n                order_.currency,\n                address(this),\n                order_.bidder,\n                order_.bidAmount\n            );\n        }\n\n        _orders[orderId].bidder = _msgSender();\n        _orders[orderId].bidAmount = amount;\n        order_ = _orders[orderId];\n\n        transferERC20(\n            order_.currency,\n            order_.bidder,\n            address(this),\n            order_.bidAmount\n        );\n\n        emit OrderBid(orderId, order_.bidder, order_.bidAmount);\n    }\n\n    function fillOrder(uint256 orderId, uint256 amount)\n        external\n        virtual\n        whenNotPaused\n        whenExists(orderId)\n    {\n        Order memory order_ = _orders[orderId];\n        require(order_.open, \"LemonadeMarketplace: order must be open to fill\");\n\n        _orders[orderId].open = false;\n        address spender;\n\n        if (order_.kind == OrderKind.Direct) {\n            require(\n                order_.openFrom <= block.timestamp,\n                \"LemonadeMarketplace: order must be open to fill - too early\"\n            );\n            require(\n                order_.openTo == 0 || order_.openTo > block.timestamp,\n                \"LemonadeMarketplace: order must be open to fill - too late\"\n            );\n            require(\n                order_.price <= amount,\n                \"LemonadeMarketplace: must match price to fill direct order\"\n            );\n\n            _orders[orderId].taker = _msgSender();\n            _orders[orderId].paidAmount = amount;\n            spender = _msgSender();\n        } else if (order_.kind == OrderKind.Auction) {\n            require(\n                (order_.bidder != address(0)),\n                \"LemonadeMarketplace: order must have bid to fill auction order\"\n            );\n            require(\n                (order_.bidder == _msgSender() &&\n                    order_.openTo <= block.timestamp) ||\n                    order_.maker == _msgSender() ||\n                    hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\n                \"LemonadeMarketplace: must be the maker or final bidder to fill auction order\"\n            );\n\n            _orders[orderId].taker = order_.bidder;\n            _orders[orderId].paidAmount = order_.bidAmount;\n            spender = address(this);\n        }\n\n        order_ = _orders[orderId];\n\n        if (order_.paidAmount > 0) {\n            uint256 transferAmount = order_.paidAmount;\n\n            uint256 feeAmount = (order_.paidAmount * FEE_VALUE) / 10000;\n            transferERC20(order_.currency, spender, FEE_ACCOUNT, feeAmount);\n            transferAmount -= feeAmount;\n\n            try\n                RoyaltiesV2(order_.tokenContract).getRaribleV2Royalties(\n                    order_.tokenId\n                )\n            returns (LibPart.Part[] memory royalties) {\n                uint256 length = royalties.length;\n                for (uint256 i; i < length; i++) {\n                    if (order_.maker != royalties[i].account) {\n                        uint256 royaltyAmount = (order_.paidAmount *\n                            royalties[i].value) / 10000;\n                        transferERC20(\n                            order_.currency,\n                            spender,\n                            royalties[i].account,\n                            royaltyAmount\n                        );\n                        transferAmount -= royaltyAmount;\n                    }\n                }\n            } catch {\n                try\n                    IERC2981(order_.tokenContract).royaltyInfo(\n                        order_.tokenId,\n                        order_.paidAmount\n                    )\n                returns (address receiver, uint256 royaltyAmount) {\n                    if (order_.maker != receiver) {\n                        transferERC20(\n                            order_.currency,\n                            spender,\n                            receiver,\n                            royaltyAmount\n                        );\n                        transferAmount -= royaltyAmount;\n                    }\n                } catch {}\n            }\n\n            if (transferAmount > 0) {\n                transferERC20(\n                    order_.currency,\n                    spender,\n                    order_.maker,\n                    transferAmount\n                );\n            }\n        }\n\n        IERC721(order_.tokenContract).safeTransferFrom(\n            address(this),\n            order_.taker,\n            order_.tokenId\n        );\n\n        emit OrderFilled(orderId, order_.taker, order_.paidAmount);\n    }\n\n    function transferERC20(\n        address currency_,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) private {\n        IERC20 currency = IERC20(currency_);\n\n        if (spender == address(this)) {\n            currency.transfer(recipient, amount);\n        } else {\n            currency.transferFrom(spender, recipient, amount); // requires allowance\n        }\n    }\n\n    function openDuration(uint256 openFrom, uint256 openTo)\n        private\n        view\n        returns (uint256)\n    {\n        uint256 start = openFrom < block.timestamp ? block.timestamp : openFrom;\n        uint256 end = openTo == 0 ? type(uint256).max : openTo;\n\n        if (start > end) {\n            // avoids overflow\n            return 0;\n        }\n\n        return end - start;\n    }\n\n    modifier whenExists(uint256 orderId) {\n        require(\n            _orders[orderId].maker != address(0),\n            \"LemonadeMarketplace: order nonexistent\"\n        );\n        _;\n    }\n\n    function pause() external virtual {\n        require(\n            hasRole(PAUSER_ROLE, _msgSender()),\n            \"LemonadeMarketplace: must have pauser role to pause\"\n        );\n        _pause();\n    }\n\n    function unpause() external virtual {\n        require(\n            hasRole(PAUSER_ROLE, _msgSender()),\n            \"LemonadeMarketplace: must have pauser role to unpause\"\n        );\n        _unpause();\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Context, RelayRecipient)\n        returns (address)\n    {\n        return RelayRecipient._msgSender();\n    }\n\n    function setTrustedForwarder(address trustedForwarder_)\n        external\n        virtual\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        trustedForwarder = trustedForwarder_;\n    }\n}\n"
    },
    "contracts/ERC721ClaimableV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./RelayRecipient.sol\";\nimport \"./Royalties.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract ERC721ClaimableV2 is\n    AccessControlEnumerable,\n    ERC721,\n    Ownable,\n    RelayRecipient,\n    Royalties\n{\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIdTracker;\n    address private _trustedOperator;\n    address private _creator;\n    string private _tokenURI;\n\n    Counters.Counter private _claimIdTracker;\n    mapping(address => bool) private _claimers;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address trustedForwarder_,\n        address trustedOperator,\n        address creator,\n        string memory tokenURI_,\n        LibPart.Part[] memory royalties,\n        uint256 initialSupply\n    ) ERC721(name, symbol) {\n        _transferOwnership(creator);\n\n        trustedForwarder = trustedForwarder_;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(DEFAULT_ADMIN_ROLE, creator);\n\n        _trustedOperator = trustedOperator;\n        _creator = creator;\n        _tokenURI = tokenURI_;\n\n        mintBatch(initialSupply, royalties);\n\n        _claimIdTracker.increment();\n        _claimers[creator] = true;\n    }\n\n    function mintBatch(uint256 amount, LibPart.Part[] memory royalties)\n        public\n        virtual\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        for (uint256 i; i < amount; i++) {\n            uint256 tokenId = _tokenIdTracker.current();\n\n            _mint(_creator, tokenId);\n            _saveRoyalties(tokenId, royalties);\n\n            _tokenIdTracker.increment();\n        }\n    }\n\n    function claim() public virtual returns (uint256) {\n        uint256 tokenId = _claimIdTracker.current();\n\n        require(\n            tokenId < _tokenIdTracker.current(),\n            \"ERC721ClaimableV2: all tokens claimed\"\n        );\n\n        address from = ownerOf(tokenId);\n        address to = _msgSender();\n\n        require(!_claimers[to], \"ERC721ClaimableV2: already claimed\");\n\n        _transfer(from, to, tokenId);\n\n        _claimIdTracker.increment();\n        _claimers[to] = true;\n\n        return tokenId;\n    }\n\n    function hasClaimed(address claimer) public view virtual returns (bool) {\n        return _claimers[claimer];\n    }\n\n    function totalClaims() public view virtual returns (uint256) {\n        return _claimIdTracker.current();\n    }\n\n    function totalSupply() public view virtual returns (uint256) {\n        return _tokenIdTracker.current();\n    }\n\n    function totalUnclaimed() public view virtual returns (uint256) {\n        return _tokenIdTracker.current() - _claimIdTracker.current();\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721ClaimableV2: URI query for nonexistent token\"\n        );\n\n        return _tokenURI;\n    }\n\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override(ERC721)\n        returns (bool isOperator)\n    {\n        if (operator == address(_trustedOperator)) {\n            return true;\n        }\n\n        return ERC721.isApprovedForAll(owner, operator);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC721, Royalties)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Context, RelayRecipient)\n        returns (address)\n    {\n        address payable sender;\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = payable(RelayRecipient._msgSender());\n        }\n        return sender;\n    }\n\n    function setTrustedForwarder(address trustedForwarder_)\n        public\n        virtual\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        trustedForwarder = trustedForwarder_;\n    }\n\n    function updateRoyalties(uint256 tokenId, LibPart.Part[] memory royalties_)\n        public\n        virtual\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721ClaimableV2: update royalties for nonexistent token\"\n        );\n\n        delete royalties[tokenId];\n        _saveRoyalties(tokenId, royalties_);\n    }\n\n    function updateRoyaltiesForAll(LibPart.Part[] memory royalties_)\n        public\n        virtual\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        uint256 n = totalSupply();\n\n        for (uint256 tokenId; tokenId < n; tokenId++) {\n            delete royalties[tokenId];\n            _saveRoyalties(tokenId, royalties_);\n        }\n    }\n}\n"
    },
    "contracts/ERC721LemonadeV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Royalties.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract ERC721LemonadeV1 is ERC721, Royalties, Ownable {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIdTracker;\n\n    mapping(uint256 => string) private _tokenURIs;\n\n    constructor(string memory name, string memory symbol)\n        ERC721(name, symbol)\n    {}\n\n    function mintToCaller(string memory tokenURI_)\n        public\n        virtual\n        returns (uint256)\n    {\n        uint256 tokenId = _tokenIdTracker.current();\n\n        _mint(_msgSender(), tokenId);\n        _tokenURIs[tokenId] = tokenURI_;\n\n        _tokenIdTracker.increment();\n\n        return tokenId;\n    }\n\n    function mintToCallerWithRoyalty(\n        string memory tokenURI_,\n        LibPart.Part[] memory royalties_\n    ) public virtual returns (uint256) {\n        uint256 tokenId = mintToCaller(tokenURI_);\n\n        _saveRoyalties(tokenId, royalties_);\n\n        return tokenId;\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Lemonade: URI query for nonexistent token\"\n        );\n\n        return _tokenURIs[tokenId];\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721, Royalties)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/ERC721LemonadeV1Polygon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC721LemonadeV1.sol\";\nimport \"./RelayRecipient.sol\";\n\ncontract ERC721LemonadeV1Polygon is ERC721LemonadeV1, RelayRecipient {\n    address private _trustedOperator;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address trustedForwarder_,\n        address trustedOperator\n    ) ERC721LemonadeV1(name, symbol) {\n        trustedForwarder = trustedForwarder_;\n        _trustedOperator = trustedOperator;\n    }\n\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override(ERC721)\n        returns (bool isOperator)\n    {\n        if (operator == address(_trustedOperator)) {\n            return true;\n        }\n\n        return ERC721.isApprovedForAll(owner, operator);\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Context, RelayRecipient)\n        returns (address)\n    {\n        address payable sender;\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = payable(RelayRecipient._msgSender());\n        }\n        return sender;\n    }\n}\n"
    },
    "contracts/ERC721LemonadeV1Forwardable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC721LemonadeV1.sol\";\nimport \"./RelayRecipient.sol\";\n\ncontract ERC721LemonadeV1Forwardable is ERC721LemonadeV1, RelayRecipient {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address trustedForwarder_\n    ) ERC721LemonadeV1(name, symbol) {\n        trustedForwarder = trustedForwarder_;\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Context, RelayRecipient)\n        returns (address)\n    {\n        return RelayRecipient._msgSender();\n    }\n}\n"
    },
    "contracts/ERC721LemonadeV1Ethereum.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC721LemonadeV1.sol\";\nimport \"./Royalties.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract OwnableDelegateProxy {}\n\ncontract ProxyRegistry {\n    mapping(address => OwnableDelegateProxy) public proxies;\n}\n\ncontract ERC721LemonadeV1Ethereum is ERC721LemonadeV1 {\n    address private _proxyRegistryAddress;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address proxyRegistryAddress\n    ) ERC721LemonadeV1(name, symbol) {\n        _proxyRegistryAddress = proxyRegistryAddress;\n    }\n\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override\n        returns (bool)\n    {\n        // Whitelist OpenSea proxy contract for easy trading.\n        ProxyRegistry proxyRegistry = ProxyRegistry(_proxyRegistryAddress);\n        if (address(proxyRegistry.proxies(owner)) == operator) {\n            return true;\n        }\n\n        return super.isApprovedForAll(owner, operator);\n    }\n}\n"
    },
    "contracts/ERC721CollectionV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\npragma abicoder v2;\n\nimport \"./rarible/LibPart.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nbytes4 constant ERC2981_INTERFACE_ID = 0x2a55205a;\nbytes4 constant RaribleRoyaltiesV2_INTERFACE_ID = 0xcad96cca;\n\ncontract OwnableDelegateProxy {}\n\ncontract ProxyRegistry {\n    mapping(address => OwnableDelegateProxy) public proxies;\n}\n\ncontract ERC721CollectionV1 is ERC165, ERC721, Ownable {\n    address private _proxyRegistryAddress;\n    address private _creator;\n    uint96 private _royalty;\n    string private _baseTokenURI;\n    uint256 private _totalSupply;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address proxyRegistryAddress,\n        address creator,\n        uint96 royalty,\n        string memory baseTokenURI,\n        uint256 totalSupply_\n    ) ERC721(name, symbol) {\n        _transferOwnership(creator);\n\n        _proxyRegistryAddress = proxyRegistryAddress;\n        _creator = creator;\n        _royalty = royalty;\n        _baseTokenURI = baseTokenURI;\n        _totalSupply = totalSupply_;\n\n        for (uint256 tokenId; tokenId < totalSupply_; tokenId++) {\n            _mint(creator, tokenId);\n        }\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    function getRaribleV2Royalties(uint256)\n        external\n        view\n        returns (LibPart.Part[] memory)\n    {\n        LibPart.Part[] memory result;\n        if (_royalty == 0) {\n            return result;\n        }\n\n        result = new LibPart.Part[](1);\n        result[0].account = payable(_creator);\n        result[0].value = _royalty;\n        return result;\n    }\n\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        override\n        returns (bool)\n    {\n        // Whitelist OpenSea proxy contract for easy trading.\n        ProxyRegistry proxyRegistry = ProxyRegistry(_proxyRegistryAddress);\n        if (address(proxyRegistry.proxies(owner)) == operator) {\n            return true;\n        }\n\n        return super.isApprovedForAll(owner, operator);\n    }\n\n    function royaltyInfo(uint256, uint256 price)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        if (_royalty == 0) {\n            return (address(0), 0);\n        }\n\n        return (_creator, (price * _royalty) / 10000);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, ERC721)\n        returns (bool)\n    {\n        return\n            interfaceId == ERC2981_INTERFACE_ID ||\n            interfaceId == RaribleRoyaltiesV2_INTERFACE_ID ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/ERC721Claimable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./RelayRecipient.sol\";\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract ERC721Claimable is\n    AccessControlEnumerable,\n    ERC721Pausable,\n    RelayRecipient\n{\n    using Counters for Counters.Counter;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    Counters.Counter private _tokenIdTracker;\n    address private _creator;\n    string private _tokenURI;\n\n    Counters.Counter private _claimIdTracker;\n    mapping(address => bool) private _claimers;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address trustedForwarder_,\n        address creator,\n        string memory tokenURI_,\n        uint256 initialSupply\n    ) ERC721(name, symbol) {\n        trustedForwarder = trustedForwarder_;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n\n        _creator = creator;\n        _tokenURI = tokenURI_;\n\n        mintBatch(initialSupply);\n\n        _claimIdTracker.increment();\n        _claimers[creator] = true;\n    }\n\n    function mintBatch(uint256 amount)\n        public\n        virtual\n        onlyRole(MINTER_ROLE)\n        whenNotPaused\n    {\n        for (uint256 i; i < amount; i++) {\n            uint256 tokenId = _tokenIdTracker.current();\n\n            _mint(_creator, tokenId);\n\n            _tokenIdTracker.increment();\n        }\n    }\n\n    function claim() public virtual whenNotPaused returns (uint256) {\n        uint256 tokenId = _claimIdTracker.current();\n\n        require(\n            tokenId < _tokenIdTracker.current(),\n            \"ERC721Claimable: all tokens claimed\"\n        );\n\n        address from = ownerOf(tokenId);\n        address to = _msgSender();\n\n        require(!_claimers[to], \"ERC721Claimable: already claimed\");\n\n        _transfer(from, to, tokenId);\n\n        _claimIdTracker.increment();\n        _claimers[to] = true;\n\n        return tokenId;\n    }\n\n    function hasClaimed(address claimer) public view virtual returns (bool) {\n        return _claimers[claimer];\n    }\n\n    function totalClaims() public view virtual returns (uint256) {\n        return _claimIdTracker.current();\n    }\n\n    function totalSupply() public view virtual returns (uint256) {\n        return _tokenIdTracker.current();\n    }\n\n    function totalUnclaimed() public view virtual returns (uint256) {\n        return _tokenIdTracker.current() - _claimIdTracker.current();\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Claimable: URI query for nonexistent token\"\n        );\n\n        return _tokenURI;\n    }\n\n    function pause() public virtual onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    function unpause() public virtual onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC721)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Context, RelayRecipient)\n        returns (address)\n    {\n        return RelayRecipient._msgSender();\n    }\n\n    function setTrustedForwarder(address trustedForwarder_)\n        public\n        virtual\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        trustedForwarder = trustedForwarder_;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}